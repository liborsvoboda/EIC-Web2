"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeArguments = void 0;
const Models_1 = require("../../Models");
const common_1 = require("./common");
const mergeArguments = (parentName, args1, args2) => {
    args2
        .filter((a) => a.type.fieldType.type === Models_1.Options.required)
        .forEach((a2) => {
        if (!args1.find((a1) => a1.name === a2.name))
            throw new common_1.MergeError({
                conflictingNode: parentName,
                conflictingField: a2.name,
                message: 'Cannot merge when required argument does not exist in correlated node',
            });
    });
    return args1
        .map((a1) => {
        const equivalentA2 = args2.find((a2) => a2.name === a1.name);
        if (!equivalentA2 && a1.type.fieldType.type === Models_1.Options.required)
            throw new common_1.MergeError({
                conflictingNode: parentName,
                conflictingField: a1.name,
                message: 'Cannot merge when required argument does not exist in correlated node',
            });
        if (!equivalentA2)
            return;
        if (a1.type.fieldType.type === Models_1.Options.required)
            return a1;
        if (equivalentA2.type.fieldType.type === Models_1.Options.required)
            return equivalentA2;
    })
        .filter((v) => !!v);
};
exports.mergeArguments = mergeArguments;
