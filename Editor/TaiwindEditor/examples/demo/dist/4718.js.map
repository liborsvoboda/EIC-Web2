{"version":3,"file":"4718.js","mappings":"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","sources":["webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/equals.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/autorun.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/promise.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/lazyObservableValue.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/api.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/services/languageService.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from './arrays.js';\n/**\n * Compares two items for equality using strict equality.\n*/\nexport const strictEquals = (a, b) => a === b;\n/**\n * Checks if the items of two arrays are equal.\n * By default, strict equality is used to compare elements, but a custom equality comparer can be provided.\n */\nexport function itemsEquals(itemEquals = strictEquals) {\n    return (a, b) => arrays.equals(a, b, itemEquals);\n}\n/**\n * Uses `item.equals(other)` to determine equality.\n */\nexport function itemEquals() {\n    return (a, b) => a.equals(b);\n}\nexport function equalsIfDefined(equalsOrV1, v2, equals) {\n    if (equals !== undefined) {\n        const v1 = equalsOrV1;\n        if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {\n            return v2 === v1;\n        }\n        return equals(v1, v2);\n    }\n    else {\n        const equals = equalsOrV1;\n        return (v1, v2) => {\n            if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {\n                return v2 === v1;\n            }\n            return equals(v1, v2);\n        };\n    }\n}\n/**\n * Drills into arrays (items ordered) and objects (keys unordered) and uses strict equality on everything else.\n*/\nexport function structuralEquals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (!structuralEquals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (a && typeof a === 'object' && b && typeof b === 'object') {\n        if (Object.getPrototypeOf(a) === Object.prototype && Object.getPrototypeOf(b) === Object.prototype) {\n            const aObj = a;\n            const bObj = b;\n            const keysA = Object.keys(aObj);\n            const keysB = Object.keys(bObj);\n            const keysBSet = new Set(keysB);\n            if (keysA.length !== keysB.length) {\n                return false;\n            }\n            for (const key of keysA) {\n                if (!keysBSet.has(key)) {\n                    return false;\n                }\n                if (!structuralEquals(aObj[key], bObj[key])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\nconst objIds = new WeakMap();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore, markAsDisposed, toDisposable, trackDisposable } from '../lifecycle.js';\nimport { DebugNameData } from './debugName.js';\nimport { getLogger } from './logging.js';\n/**\n * Runs immediately and whenever a transaction ends and an observed observable changed.\n * {@link fn} should start with a JS Doc using `@description` to name the autorun.\n */\nexport function autorun(fn) {\n    return new AutorunObserver(new DebugNameData(undefined, undefined, fn), fn, undefined, undefined);\n}\n/**\n * Runs immediately and whenever a transaction ends and an observed observable changed.\n * {@link fn} should start with a JS Doc using `@description` to name the autorun.\n */\nexport function autorunOpts(options, fn) {\n    return new AutorunObserver(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn ?? fn), fn, undefined, undefined);\n}\n/**\n * Runs immediately and whenever a transaction ends and an observed observable changed.\n * {@link fn} should start with a JS Doc using `@description` to name the autorun.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The run function is given the last change summary.\n * The change summary is discarded after the run function was called.\n *\n * @see autorun\n */\nexport function autorunHandleChanges(options, fn) {\n    return new AutorunObserver(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn ?? fn), fn, options.createEmptyChangeSummary, options.handleChange);\n}\n/**\n * @see autorunHandleChanges (but with a disposable store that is cleared before the next run or on dispose)\n */\nexport function autorunWithStoreHandleChanges(options, fn) {\n    const store = new DisposableStore();\n    const disposable = autorunHandleChanges({\n        owner: options.owner,\n        debugName: options.debugName,\n        debugReferenceFn: options.debugReferenceFn ?? fn,\n        createEmptyChangeSummary: options.createEmptyChangeSummary,\n        handleChange: options.handleChange,\n    }, (reader, changeSummary) => {\n        store.clear();\n        fn(reader, changeSummary, store);\n    });\n    return toDisposable(() => {\n        disposable.dispose();\n        store.dispose();\n    });\n}\n/**\n * @see autorun (but with a disposable store that is cleared before the next run or on dispose)\n */\nexport function autorunWithStore(fn) {\n    const store = new DisposableStore();\n    const disposable = autorunOpts({\n        owner: undefined,\n        debugName: undefined,\n        debugReferenceFn: fn,\n    }, reader => {\n        store.clear();\n        fn(reader, store);\n    });\n    return toDisposable(() => {\n        disposable.dispose();\n        store.dispose();\n    });\n}\nexport class AutorunObserver {\n    get debugName() {\n        return this._debugNameData.getDebugName(this) ?? '(anonymous)';\n    }\n    constructor(_debugNameData, _runFn, createChangeSummary, _handleChange) {\n        this._debugNameData = _debugNameData;\n        this._runFn = _runFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this.state = 2 /* AutorunState.stale */;\n        this.updateCount = 0;\n        this.disposed = false;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = this.createChangeSummary?.();\n        getLogger()?.handleAutorunCreated(this);\n        this._runIfNeeded();\n        trackDisposable(this);\n    }\n    dispose() {\n        this.disposed = true;\n        for (const o of this.dependencies) {\n            o.removeObserver(this);\n        }\n        this.dependencies.clear();\n        markAsDisposed(this);\n    }\n    _runIfNeeded() {\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        this.state = 3 /* AutorunState.upToDate */;\n        const isDisposed = this.disposed;\n        try {\n            if (!isDisposed) {\n                getLogger()?.handleAutorunTriggered(this);\n                const changeSummary = this.changeSummary;\n                this.changeSummary = this.createChangeSummary?.();\n                this._runFn(this, changeSummary);\n            }\n        }\n        finally {\n            if (!isDisposed) {\n                getLogger()?.handleAutorunFinished(this);\n            }\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n    }\n    toString() {\n        return `Autorun<${this.debugName}>`;\n    }\n    // IObserver implementation\n    beginUpdate() {\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n        this.updateCount++;\n    }\n    endUpdate() {\n        if (this.updateCount === 1) {\n            do {\n                if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* AutorunState.upToDate */;\n                    for (const d of this.dependencies) {\n                        d.reportChanges();\n                        if (this.state === 2 /* AutorunState.stale */) {\n                            // The other dependencies will refresh on demand\n                            break;\n                        }\n                    }\n                }\n                this._runIfNeeded();\n            } while (this.state !== 3 /* AutorunState.upToDate */);\n        }\n        this.updateCount--;\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        if (this.state === 3 /* AutorunState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: (o) => o === observable,\n            }, this.changeSummary) : true;\n            if (shouldReact) {\n                this.state = 2 /* AutorunState.stale */;\n            }\n        }\n    }\n    // IReader implementation\n    readObservable(observable) {\n        // In case the run action disposes the autorun\n        if (this.disposed) {\n            return observable.get();\n        }\n        observable.addObserver(this);\n        const value = observable.get();\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n}\n(function (autorun) {\n    autorun.Observer = AutorunObserver;\n})(autorun || (autorun = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from './autorun.js';\nimport { observableValue, transaction } from './base.js';\nimport { CancellationError } from '../errors.js';\n/**\n * A promise whose state is observable.\n */\nexport class ObservablePromise {\n    static fromFn(fn) {\n        return new ObservablePromise(fn());\n    }\n    constructor(promise) {\n        this._value = observableValue(this, undefined);\n        /**\n         * The current state of the promise.\n         * Is `undefined` if the promise didn't resolve yet.\n         */\n        this.promiseResult = this._value;\n        this.promise = promise.then(value => {\n            transaction(tx => {\n                /** @description onPromiseResolved */\n                this._value.set(new PromiseResult(value, undefined), tx);\n            });\n            return value;\n        }, error => {\n            transaction(tx => {\n                /** @description onPromiseRejected */\n                this._value.set(new PromiseResult(undefined, error), tx);\n            });\n            throw error;\n        });\n    }\n}\nexport class PromiseResult {\n    constructor(\n    /**\n     * The value of the resolved promise.\n     * Undefined if the promise rejected.\n     */\n    data, \n    /**\n     * The error in case of a rejected promise.\n     * Undefined if the promise resolved.\n     */\n    error) {\n        this.data = data;\n        this.error = error;\n    }\n}\nexport function waitForState(observable, predicate, isError, cancellationToken) {\n    if (!predicate) {\n        predicate = state => state !== null && state !== undefined;\n    }\n    return new Promise((resolve, reject) => {\n        let isImmediateRun = true;\n        let shouldDispose = false;\n        const stateObs = observable.map(state => {\n            /** @description waitForState.state */\n            return {\n                isFinished: predicate(state),\n                error: isError ? isError(state) : false,\n                state\n            };\n        });\n        const d = autorun(reader => {\n            /** @description waitForState */\n            const { isFinished, error, state } = stateObs.read(reader);\n            if (isFinished || error) {\n                if (isImmediateRun) {\n                    // The variable `d` is not initialized yet\n                    shouldDispose = true;\n                }\n                else {\n                    d.dispose();\n                }\n                if (error) {\n                    reject(error === true ? state : error);\n                }\n                else {\n                    resolve(state);\n                }\n            }\n        });\n        if (cancellationToken) {\n            const dc = cancellationToken.onCancellationRequested(() => {\n                d.dispose();\n                dc.dispose();\n                reject(new CancellationError());\n            });\n            if (cancellationToken.isCancellationRequested) {\n                d.dispose();\n                dc.dispose();\n                reject(new CancellationError());\n                return;\n            }\n        }\n        isImmediateRun = false;\n        if (shouldDispose) {\n            d.dispose();\n        }\n    });\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BaseObservable, TransactionImpl } from './base.js';\n/**\n * Holds off updating observers until the value is actually read.\n*/\nexport class LazyObservableValue extends BaseObservable {\n    get debugName() {\n        return this._debugNameData.getDebugName(this) ?? 'LazyObservableValue';\n    }\n    constructor(_debugNameData, initialValue, _equalityComparator) {\n        super();\n        this._debugNameData = _debugNameData;\n        this._equalityComparator = _equalityComparator;\n        this._isUpToDate = true;\n        this._deltas = [];\n        this._updateCounter = 0;\n        this._value = initialValue;\n    }\n    get() {\n        this._update();\n        return this._value;\n    }\n    _update() {\n        if (this._isUpToDate) {\n            return;\n        }\n        this._isUpToDate = true;\n        if (this._deltas.length > 0) {\n            for (const observer of this.observers) {\n                for (const change of this._deltas) {\n                    observer.handleChange(this, change);\n                }\n            }\n            this._deltas.length = 0;\n        }\n        else {\n            for (const observer of this.observers) {\n                observer.handleChange(this, undefined);\n            }\n        }\n    }\n    _beginUpdate() {\n        this._updateCounter++;\n        if (this._updateCounter === 1) {\n            for (const observer of this.observers) {\n                observer.beginUpdate(this);\n            }\n        }\n    }\n    _endUpdate() {\n        this._updateCounter--;\n        if (this._updateCounter === 0) {\n            this._update();\n            // End update could change the observer list.\n            const observers = [...this.observers];\n            for (const r of observers) {\n                r.endUpdate(this);\n            }\n        }\n    }\n    addObserver(observer) {\n        const shouldCallBeginUpdate = !this.observers.has(observer) && this._updateCounter > 0;\n        super.addObserver(observer);\n        if (shouldCallBeginUpdate) {\n            observer.beginUpdate(this);\n        }\n    }\n    removeObserver(observer) {\n        const shouldCallEndUpdate = this.observers.has(observer) && this._updateCounter > 0;\n        super.removeObserver(observer);\n        if (shouldCallEndUpdate) {\n            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n            observer.endUpdate(this);\n        }\n    }\n    set(value, tx, change) {\n        if (change === undefined && this._equalityComparator(this._value, value)) {\n            return;\n        }\n        let _tx;\n        if (!tx) {\n            tx = _tx = new TransactionImpl(() => { }, () => `Setting ${this.debugName}`);\n        }\n        try {\n            this._isUpToDate = false;\n            this._setValue(value);\n            if (change !== undefined) {\n                this._deltas.push(change);\n            }\n            tx.updateObserver({\n                beginUpdate: () => this._beginUpdate(),\n                endUpdate: () => this._endUpdate(),\n                handleChange: (observable, change) => { },\n                handlePossibleChange: (observable) => { },\n            }, this);\n            if (this._updateCounter > 1) {\n                // We already started begin/end update, so we need to manually call handlePossibleChange\n                for (const observer of this.observers) {\n                    observer.handlePossibleChange(this);\n                }\n            }\n        }\n        finally {\n            if (_tx) {\n                _tx.finish();\n            }\n        }\n    }\n    toString() {\n        return `${this.debugName}: ${this._value}`;\n    }\n    _setValue(newValue) {\n        this._value = newValue;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { strictEquals } from '../equals.js';\nimport { ObservableValue } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { LazyObservableValue } from './lazyObservableValue.js';\nexport function observableValueOpts(options, initialValue) {\n    if (options.lazy) {\n        return new LazyObservableValue(new DebugNameData(options.owner, options.debugName, undefined), initialValue, options.equalsFn ?? strictEquals);\n    }\n    return new ObservableValue(new DebugNameData(options.owner, options.debugName, undefined), initialValue, options.equalsFn ?? strictEquals);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { strictEquals } from '../equals.js';\nimport { DebugNameData, getFunctionName } from './debugName.js';\nimport { getLogger } from './logging.js';\nlet _recomputeInitiallyAndOnChange;\nexport function _setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange) {\n    _recomputeInitiallyAndOnChange = recomputeInitiallyAndOnChange;\n}\nlet _keepObserved;\nexport function _setKeepObserved(keepObserved) {\n    _keepObserved = keepObserved;\n}\nlet _derived;\n/**\n * @internal\n * This is to allow splitting files.\n*/\nexport function _setDerivedOpts(derived) {\n    _derived = derived;\n}\nexport class ConvenientObservable {\n    get TChange() { return null; }\n    reportChanges() {\n        this.get();\n    }\n    /** @sealed */\n    read(reader) {\n        if (reader) {\n            return reader.readObservable(this);\n        }\n        else {\n            return this.get();\n        }\n    }\n    map(fnOrOwner, fnOrUndefined) {\n        const owner = fnOrUndefined === undefined ? undefined : fnOrOwner;\n        const fn = fnOrUndefined === undefined ? fnOrOwner : fnOrUndefined;\n        return _derived({\n            owner,\n            debugName: () => {\n                const name = getFunctionName(fn);\n                if (name !== undefined) {\n                    return name;\n                }\n                // regexp to match `x => x.y` or `x => x?.y` where x and y can be arbitrary identifiers (uses backref):\n                const regexp = /^\\s*\\(?\\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*\\)?\\s*=>\\s*\\1(?:\\??)\\.([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*$/;\n                const match = regexp.exec(fn.toString());\n                if (match) {\n                    return `${this.debugName}.${match[2]}`;\n                }\n                if (!owner) {\n                    return `${this.debugName} (mapped)`;\n                }\n                return undefined;\n            },\n            debugReferenceFn: fn,\n        }, (reader) => fn(this.read(reader), reader));\n    }\n    /**\n     * @sealed\n     * Converts an observable of an observable value into a direct observable of the value.\n    */\n    flatten() {\n        return _derived({\n            owner: undefined,\n            debugName: () => `${this.debugName} (flattened)`,\n        }, (reader) => this.read(reader).read(reader));\n    }\n    recomputeInitiallyAndOnChange(store, handleValue) {\n        store.add(_recomputeInitiallyAndOnChange(this, handleValue));\n        return this;\n    }\n    /**\n     * Ensures that this observable is observed. This keeps the cache alive.\n     * However, in case of deriveds, it does not force eager evaluation (only when the value is read/get).\n     * Use `recomputeInitiallyAndOnChange` for eager evaluation.\n     */\n    keepObserved(store) {\n        store.add(_keepObserved(this));\n        return this;\n    }\n}\nexport class BaseObservable extends ConvenientObservable {\n    constructor() {\n        super(...arguments);\n        this.observers = new Set();\n    }\n    addObserver(observer) {\n        const len = this.observers.size;\n        this.observers.add(observer);\n        if (len === 0) {\n            this.onFirstObserverAdded();\n        }\n    }\n    removeObserver(observer) {\n        const deleted = this.observers.delete(observer);\n        if (deleted && this.observers.size === 0) {\n            this.onLastObserverRemoved();\n        }\n    }\n    onFirstObserverAdded() { }\n    onLastObserverRemoved() { }\n}\n/**\n * Starts a transaction in which many observables can be changed at once.\n * {@link fn} should start with a JS Doc using `@description` to give the transaction a debug name.\n * Reaction run on demand or when the transaction ends.\n */\nexport function transaction(fn, getDebugName) {\n    const tx = new TransactionImpl(fn, getDebugName);\n    try {\n        fn(tx);\n    }\n    finally {\n        tx.finish();\n    }\n}\nlet _globalTransaction = undefined;\nexport function globalTransaction(fn) {\n    if (_globalTransaction) {\n        fn(_globalTransaction);\n    }\n    else {\n        const tx = new TransactionImpl(fn, undefined);\n        _globalTransaction = tx;\n        try {\n            fn(tx);\n        }\n        finally {\n            tx.finish(); // During finish, more actions might be added to the transaction.\n            // Which is why we only clear the global transaction after finish.\n            _globalTransaction = undefined;\n        }\n    }\n}\nexport async function asyncTransaction(fn, getDebugName) {\n    const tx = new TransactionImpl(fn, getDebugName);\n    try {\n        await fn(tx);\n    }\n    finally {\n        tx.finish();\n    }\n}\n/**\n * Allows to chain transactions.\n */\nexport function subtransaction(tx, fn, getDebugName) {\n    if (!tx) {\n        transaction(fn, getDebugName);\n    }\n    else {\n        fn(tx);\n    }\n}\nexport class TransactionImpl {\n    constructor(_fn, _getDebugName) {\n        this._fn = _fn;\n        this._getDebugName = _getDebugName;\n        this.updatingObservers = [];\n        getLogger()?.handleBeginTransaction(this);\n    }\n    getDebugName() {\n        if (this._getDebugName) {\n            return this._getDebugName();\n        }\n        return getFunctionName(this._fn);\n    }\n    updateObserver(observer, observable) {\n        // When this gets called while finish is active, they will still get considered\n        this.updatingObservers.push({ observer, observable });\n        observer.beginUpdate(observable);\n    }\n    finish() {\n        const updatingObservers = this.updatingObservers;\n        for (let i = 0; i < updatingObservers.length; i++) {\n            const { observer, observable } = updatingObservers[i];\n            observer.endUpdate(observable);\n        }\n        // Prevent anyone from updating observers from now on.\n        this.updatingObservers = null;\n        getLogger()?.handleEndTransaction();\n    }\n}\nexport function observableValue(nameOrOwner, initialValue) {\n    let debugNameData;\n    if (typeof nameOrOwner === 'string') {\n        debugNameData = new DebugNameData(undefined, nameOrOwner, undefined);\n    }\n    else {\n        debugNameData = new DebugNameData(nameOrOwner, undefined, undefined);\n    }\n    return new ObservableValue(debugNameData, initialValue, strictEquals);\n}\nexport class ObservableValue extends BaseObservable {\n    get debugName() {\n        return this._debugNameData.getDebugName(this) ?? 'ObservableValue';\n    }\n    constructor(_debugNameData, initialValue, _equalityComparator) {\n        super();\n        this._debugNameData = _debugNameData;\n        this._equalityComparator = _equalityComparator;\n        this._value = initialValue;\n    }\n    get() {\n        return this._value;\n    }\n    set(value, tx, change) {\n        if (change === undefined && this._equalityComparator(this._value, value)) {\n            return;\n        }\n        let _tx;\n        if (!tx) {\n            tx = _tx = new TransactionImpl(() => { }, () => `Setting ${this.debugName}`);\n        }\n        try {\n            const oldValue = this._value;\n            this._setValue(value);\n            getLogger()?.handleObservableChanged(this, { oldValue, newValue: value, change, didChange: true, hadValue: true });\n            for (const observer of this.observers) {\n                tx.updateObserver(observer, this);\n                observer.handleChange(this, change);\n            }\n        }\n        finally {\n            if (_tx) {\n                _tx.finish();\n            }\n        }\n    }\n    toString() {\n        return `${this.debugName}: ${this._value}`;\n    }\n    _setValue(newValue) {\n        this._value = newValue;\n    }\n}\n/**\n * A disposable observable. When disposed, its value is also disposed.\n * When a new value is set, the previous value is disposed.\n */\nexport function disposableObservableValue(nameOrOwner, initialValue) {\n    let debugNameData;\n    if (typeof nameOrOwner === 'string') {\n        debugNameData = new DebugNameData(undefined, nameOrOwner, undefined);\n    }\n    else {\n        debugNameData = new DebugNameData(nameOrOwner, undefined, undefined);\n    }\n    return new DisposableObservableValue(debugNameData, initialValue, strictEquals);\n}\nexport class DisposableObservableValue extends ObservableValue {\n    _setValue(newValue) {\n        if (this._value === newValue) {\n            return;\n        }\n        if (this._value) {\n            this._value.dispose();\n        }\n        this._value = newValue;\n    }\n    dispose() {\n        this._value?.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DebugNameData {\n    constructor(owner, debugNameSource, referenceFn) {\n        this.owner = owner;\n        this.debugNameSource = debugNameSource;\n        this.referenceFn = referenceFn;\n    }\n    getDebugName(target) {\n        return getDebugName(target, this);\n    }\n}\nconst countPerName = new Map();\nconst cachedDebugName = new WeakMap();\nexport function getDebugName(target, data) {\n    const cached = cachedDebugName.get(target);\n    if (cached) {\n        return cached;\n    }\n    const dbgName = computeDebugName(target, data);\n    if (dbgName) {\n        let count = countPerName.get(dbgName) ?? 0;\n        count++;\n        countPerName.set(dbgName, count);\n        const result = count === 1 ? dbgName : `${dbgName}#${count}`;\n        cachedDebugName.set(target, result);\n        return result;\n    }\n    return undefined;\n}\nfunction computeDebugName(self, data) {\n    const cached = cachedDebugName.get(self);\n    if (cached) {\n        return cached;\n    }\n    const ownerStr = data.owner ? formatOwner(data.owner) + `.` : '';\n    let result;\n    const debugNameSource = data.debugNameSource;\n    if (debugNameSource !== undefined) {\n        if (typeof debugNameSource === 'function') {\n            result = debugNameSource();\n            if (result !== undefined) {\n                return ownerStr + result;\n            }\n        }\n        else {\n            return ownerStr + debugNameSource;\n        }\n    }\n    const referenceFn = data.referenceFn;\n    if (referenceFn !== undefined) {\n        result = getFunctionName(referenceFn);\n        if (result !== undefined) {\n            return ownerStr + result;\n        }\n    }\n    if (data.owner !== undefined) {\n        const key = findKey(data.owner, self);\n        if (key !== undefined) {\n            return ownerStr + key;\n        }\n    }\n    return undefined;\n}\nfunction findKey(obj, value) {\n    for (const key in obj) {\n        if (obj[key] === value) {\n            return key;\n        }\n    }\n    return undefined;\n}\nconst countPerClassName = new Map();\nconst ownerId = new WeakMap();\nfunction formatOwner(owner) {\n    const id = ownerId.get(owner);\n    if (id) {\n        return id;\n    }\n    const className = getClassName(owner);\n    let count = countPerClassName.get(className) ?? 0;\n    count++;\n    countPerClassName.set(className, count);\n    const result = count === 1 ? className : `${className}#${count}`;\n    ownerId.set(owner, result);\n    return result;\n}\nfunction getClassName(obj) {\n    const ctor = obj.constructor;\n    if (ctor) {\n        return ctor.name;\n    }\n    return 'Object';\n}\nexport function getFunctionName(fn) {\n    const fnSrc = fn.toString();\n    // Pattern: /** @description ... */\n    const regexp = /\\/\\*\\*\\s*@description\\s*([^*]*)\\*\\//;\n    const match = regexp.exec(fnSrc);\n    const result = match ? match[1] : undefined;\n    return result?.trim();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { strictEquals } from '../equals.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerivedOpts } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { getLogger } from './logging.js';\nexport function derived(computeFnOrOwner, computeFn) {\n    if (computeFn !== undefined) {\n        return new Derived(new DebugNameData(computeFnOrOwner, undefined, computeFn), computeFn, undefined, undefined, undefined, strictEquals);\n    }\n    return new Derived(new DebugNameData(undefined, undefined, computeFnOrOwner), computeFnOrOwner, undefined, undefined, undefined, strictEquals);\n}\nexport function derivedWithSetter(owner, computeFn, setter) {\n    return new DerivedWithSetter(new DebugNameData(owner, undefined, computeFn), computeFn, undefined, undefined, undefined, strictEquals, setter);\n}\nexport function derivedOpts(options, computeFn) {\n    return new Derived(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn), computeFn, undefined, undefined, options.onLastObserverRemoved, options.equalsFn ?? strictEquals);\n}\n_setDerivedOpts(derivedOpts);\n/**\n * Represents an observable that is derived from other observables.\n * The value is only recomputed when absolutely needed.\n *\n * {@link computeFn} should start with a JS Doc using `@description` to name the derived.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The compute function is given the last change summary.\n * The change summary is discarded after the compute function was called.\n *\n * @see derived\n */\nexport function derivedHandleChanges(options, computeFn) {\n    return new Derived(new DebugNameData(options.owner, options.debugName, undefined), computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, options.equalityComparer ?? strictEquals);\n}\nexport function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    const store = new DisposableStore();\n    return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n        store.clear();\n        return computeFn(r, store);\n    }, undefined, undefined, () => store.dispose(), strictEquals);\n}\nexport function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    let store = undefined;\n    return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n        if (!store) {\n            store = new DisposableStore();\n        }\n        else {\n            store.clear();\n        }\n        const result = computeFn(r);\n        if (result) {\n            store.add(result);\n        }\n        return result;\n    }, undefined, undefined, () => {\n        if (store) {\n            store.dispose();\n            store = undefined;\n        }\n    }, strictEquals);\n}\nexport class Derived extends BaseObservable {\n    get debugName() {\n        return this._debugNameData.getDebugName(this) ?? '(anonymous)';\n    }\n    constructor(_debugNameData, _computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined, _equalityComparator) {\n        super();\n        this._debugNameData = _debugNameData;\n        this._computeFn = _computeFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this._handleLastObserverRemoved = _handleLastObserverRemoved;\n        this._equalityComparator = _equalityComparator;\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        this.updateCount = 0;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = undefined;\n        this.changeSummary = this.createChangeSummary?.();\n        getLogger()?.handleDerivedCreated(this);\n    }\n    onLastObserverRemoved() {\n        /**\n         * We are not tracking changes anymore, thus we have to assume\n         * that our cache is invalid.\n         */\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        for (const d of this.dependencies) {\n            d.removeObserver(this);\n        }\n        this.dependencies.clear();\n        this._handleLastObserverRemoved?.();\n    }\n    get() {\n        if (this.observers.size === 0) {\n            // Without observers, we don't know when to clean up stuff.\n            // Thus, we don't cache anything to prevent memory leaks.\n            const result = this._computeFn(this, this.createChangeSummary?.());\n            // Clear new dependencies\n            this.onLastObserverRemoved();\n            return result;\n        }\n        else {\n            do {\n                // We might not get a notification for a dependency that changed while it is updating,\n                // thus we also have to ask all our depedencies if they changed in this case.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    for (const d of this.dependencies) {\n                        /** might call {@link handleChange} indirectly, which could make us stale */\n                        d.reportChanges();\n                        if (this.state === 2 /* DerivedState.stale */) {\n                            // The other dependencies will refresh on demand, so early break\n                            break;\n                        }\n                    }\n                }\n                // We called report changes of all dependencies.\n                // If we are still not stale, we can assume to be up to date again.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* DerivedState.upToDate */;\n                }\n                this._recomputeIfNeeded();\n                // In case recomputation changed one of our dependencies, we need to recompute again.\n            } while (this.state !== 3 /* DerivedState.upToDate */);\n            return this.value;\n        }\n    }\n    _recomputeIfNeeded() {\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        const hadValue = this.state !== 0 /* DerivedState.initial */;\n        const oldValue = this.value;\n        this.state = 3 /* DerivedState.upToDate */;\n        const changeSummary = this.changeSummary;\n        this.changeSummary = this.createChangeSummary?.();\n        try {\n            /** might call {@link handleChange} indirectly, which could invalidate us */\n            this.value = this._computeFn(this, changeSummary);\n        }\n        finally {\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n        const didChange = hadValue && !(this._equalityComparator(oldValue, this.value));\n        getLogger()?.handleDerivedRecomputed(this, {\n            oldValue,\n            newValue: this.value,\n            change: undefined,\n            didChange,\n            hadValue,\n        });\n        if (didChange) {\n            for (const r of this.observers) {\n                r.handleChange(this, undefined);\n            }\n        }\n    }\n    toString() {\n        return `LazyDerived<${this.debugName}>`;\n    }\n    // IObserver Implementation\n    beginUpdate(_observable) {\n        this.updateCount++;\n        const propagateBeginUpdate = this.updateCount === 1;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            // If we propagate begin update, that will already signal a possible change.\n            if (!propagateBeginUpdate) {\n                for (const r of this.observers) {\n                    r.handlePossibleChange(this);\n                }\n            }\n        }\n        if (propagateBeginUpdate) {\n            for (const r of this.observers) {\n                r.beginUpdate(this); // This signals a possible change\n            }\n        }\n    }\n    endUpdate(_observable) {\n        this.updateCount--;\n        if (this.updateCount === 0) {\n            // End update could change the observer list.\n            const observers = [...this.observers];\n            for (const r of observers) {\n                r.endUpdate(this);\n            }\n        }\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        // In all other states, observers already know that we might have changed.\n        if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            for (const r of this.observers) {\n                r.handlePossibleChange(this);\n            }\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: (o) => o === observable,\n            }, this.changeSummary) : true;\n            const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n            if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n                this.state = 2 /* DerivedState.stale */;\n                if (wasUpToDate) {\n                    for (const r of this.observers) {\n                        r.handlePossibleChange(this);\n                    }\n                }\n            }\n        }\n    }\n    // IReader Implementation\n    readObservable(observable) {\n        // Subscribe before getting the value to enable caching\n        observable.addObserver(this);\n        /** This might call {@link handleChange} indirectly, which could invalidate us */\n        const value = observable.get();\n        // Which is why we only add the observable to the dependencies now.\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n    addObserver(observer) {\n        const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n        super.addObserver(observer);\n        if (shouldCallBeginUpdate) {\n            observer.beginUpdate(this);\n        }\n    }\n    removeObserver(observer) {\n        const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n        super.removeObserver(observer);\n        if (shouldCallEndUpdate) {\n            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n            observer.endUpdate(this);\n        }\n    }\n}\nexport class DerivedWithSetter extends Derived {\n    constructor(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved = undefined, equalityComparator, set) {\n        super(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved, equalityComparator);\n        this.set = set;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet globalObservableLogger;\nexport function setLogger(logger) {\n    globalObservableLogger = logger;\n}\nexport function getLogger() {\n    return globalObservableLogger;\n}\nexport class ConsoleObservableLogger {\n    constructor() {\n        this.indentation = 0;\n        this.changedObservablesSets = new WeakMap();\n    }\n    textToConsoleArgs(text) {\n        return consoleTextToArgs([\n            normalText(repeat('|  ', this.indentation)),\n            text,\n        ]);\n    }\n    formatInfo(info) {\n        if (!info.hadValue) {\n            return [\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n                normalText(` (initial)`),\n            ];\n        }\n        return info.didChange\n            ? [\n                normalText(` `),\n                styled(formatValue(info.oldValue, 70), {\n                    color: 'red',\n                    strikeThrough: true,\n                }),\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n            ]\n            : [normalText(` (unchanged)`)];\n    }\n    handleObservableChanged(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable value changed'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n        ]));\n    }\n    formatChanges(changes) {\n        if (changes.size === 0) {\n            return undefined;\n        }\n        return styled(' (changed deps: ' +\n            [...changes].map((o) => o.debugName).join(', ') +\n            ')', { color: 'gray' });\n    }\n    handleDerivedCreated(derived) {\n        const existingHandleChange = derived.handleChange;\n        this.changedObservablesSets.set(derived, new Set());\n        derived.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(derived).add(observable);\n            return existingHandleChange.apply(derived, [observable, change]);\n        };\n    }\n    handleDerivedRecomputed(derived, info) {\n        const changedObservables = this.changedObservablesSets.get(derived);\n        console.log(...this.textToConsoleArgs([\n            formatKind('derived recomputed'),\n            styled(derived.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: derived._debugNameData.referenceFn ?? derived._computeFn }] }\n        ]));\n        changedObservables.clear();\n    }\n    handleFromEventObservableTriggered(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable from event triggered'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            { data: [{ fn: observable._getValue }] }\n        ]));\n    }\n    handleAutorunCreated(autorun) {\n        const existingHandleChange = autorun.handleChange;\n        this.changedObservablesSets.set(autorun, new Set());\n        autorun.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(autorun).add(observable);\n            return existingHandleChange.apply(autorun, [observable, change]);\n        };\n    }\n    handleAutorunTriggered(autorun) {\n        const changedObservables = this.changedObservablesSets.get(autorun);\n        console.log(...this.textToConsoleArgs([\n            formatKind('autorun'),\n            styled(autorun.debugName, { color: 'BlueViolet' }),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: autorun._debugNameData.referenceFn ?? autorun._runFn }] }\n        ]));\n        changedObservables.clear();\n        this.indentation++;\n    }\n    handleAutorunFinished(autorun) {\n        this.indentation--;\n    }\n    handleBeginTransaction(transaction) {\n        let transactionName = transaction.getDebugName();\n        if (transactionName === undefined) {\n            transactionName = '';\n        }\n        console.log(...this.textToConsoleArgs([\n            formatKind('transaction'),\n            styled(transactionName, { color: 'BlueViolet' }),\n            { data: [{ fn: transaction._fn }] }\n        ]));\n        this.indentation++;\n    }\n    handleEndTransaction() {\n        this.indentation--;\n    }\n}\nfunction consoleTextToArgs(text) {\n    const styles = new Array();\n    const data = [];\n    let firstArg = '';\n    function process(t) {\n        if ('length' in t) {\n            for (const item of t) {\n                if (item) {\n                    process(item);\n                }\n            }\n        }\n        else if ('text' in t) {\n            firstArg += `%c${t.text}`;\n            styles.push(t.style);\n            if (t.data) {\n                data.push(...t.data);\n            }\n        }\n        else if ('data' in t) {\n            data.push(...t.data);\n        }\n    }\n    process(text);\n    const result = [firstArg, ...styles];\n    result.push(...data);\n    return result;\n}\nfunction normalText(text) {\n    return styled(text, { color: 'black' });\n}\nfunction formatKind(kind) {\n    return styled(padStr(`${kind}: `, 10), { color: 'black', bold: true });\n}\nfunction styled(text, options = {\n    color: 'black',\n}) {\n    function objToCss(styleObj) {\n        return Object.entries(styleObj).reduce((styleString, [propName, propValue]) => {\n            return `${styleString}${propName}:${propValue};`;\n        }, '');\n    }\n    const style = {\n        color: options.color,\n    };\n    if (options.strikeThrough) {\n        style['text-decoration'] = 'line-through';\n    }\n    if (options.bold) {\n        style['font-weight'] = 'bold';\n    }\n    return {\n        text,\n        style: objToCss(style),\n    };\n}\nfunction formatValue(value, availableLen) {\n    switch (typeof value) {\n        case 'number':\n            return '' + value;\n        case 'string':\n            if (value.length + 2 <= availableLen) {\n                return `\"${value}\"`;\n            }\n            return `\"${value.substr(0, availableLen - 7)}\"+...`;\n        case 'boolean':\n            return value ? 'true' : 'false';\n        case 'undefined':\n            return 'undefined';\n        case 'object':\n            if (value === null) {\n                return 'null';\n            }\n            if (Array.isArray(value)) {\n                return formatArray(value, availableLen);\n            }\n            return formatObject(value, availableLen);\n        case 'symbol':\n            return value.toString();\n        case 'function':\n            return `[[Function${value.name ? ' ' + value.name : ''}]]`;\n        default:\n            return '' + value;\n    }\n}\nfunction formatArray(value, availableLen) {\n    let result = '[ ';\n    let first = true;\n    for (const val of value) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' ]';\n    return result;\n}\nfunction formatObject(value, availableLen) {\n    let result = '{ ';\n    let first = true;\n    for (const [key, val] of Object.entries(value)) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${key}: ${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' }';\n    return result;\n}\nfunction repeat(str, count) {\n    let result = '';\n    for (let i = 1; i <= count; i++) {\n        result += str;\n    }\n    return result;\n}\nfunction padStr(str, length) {\n    while (str.length < length) {\n        str += ' ';\n    }\n    return str;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Event } from '../event.js';\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { BaseObservable, ConvenientObservable, _setKeepObserved, _setRecomputeInitiallyAndOnChange, subtransaction, transaction } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { derived, derivedOpts } from './derived.js';\nimport { getLogger } from './logging.js';\nimport { strictEquals } from '../equals.js';\n/**\n * Represents an efficient observable whose value never changes.\n */\nexport function constObservable(value) {\n    return new ConstObservable(value);\n}\nclass ConstObservable extends ConvenientObservable {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get debugName() {\n        return this.toString();\n    }\n    get() {\n        return this.value;\n    }\n    addObserver(observer) {\n        // NO OP\n    }\n    removeObserver(observer) {\n        // NO OP\n    }\n    toString() {\n        return `Const: ${this.value}`;\n    }\n}\nexport function observableFromEvent(...args) {\n    let owner;\n    let event;\n    let getValue;\n    if (args.length === 3) {\n        [owner, event, getValue] = args;\n    }\n    else {\n        [event, getValue] = args;\n    }\n    return new FromEventObservable(new DebugNameData(owner, undefined, getValue), event, getValue, () => FromEventObservable.globalTransaction, strictEquals);\n}\nexport function observableFromEventOpts(options, event, getValue) {\n    return new FromEventObservable(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn ?? getValue), event, getValue, () => FromEventObservable.globalTransaction, options.equalsFn ?? strictEquals);\n}\nexport class FromEventObservable extends BaseObservable {\n    constructor(_debugNameData, event, _getValue, _getTransaction, _equalityComparator) {\n        super();\n        this._debugNameData = _debugNameData;\n        this.event = event;\n        this._getValue = _getValue;\n        this._getTransaction = _getTransaction;\n        this._equalityComparator = _equalityComparator;\n        this.hasValue = false;\n        this.handleEvent = (args) => {\n            const newValue = this._getValue(args);\n            const oldValue = this.value;\n            const didChange = !this.hasValue || !(this._equalityComparator(oldValue, newValue));\n            let didRunTransaction = false;\n            if (didChange) {\n                this.value = newValue;\n                if (this.hasValue) {\n                    didRunTransaction = true;\n                    subtransaction(this._getTransaction(), (tx) => {\n                        getLogger()?.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n                        for (const o of this.observers) {\n                            tx.updateObserver(o, this);\n                            o.handleChange(this, undefined);\n                        }\n                    }, () => {\n                        const name = this.getDebugName();\n                        return 'Event fired' + (name ? `: ${name}` : '');\n                    });\n                }\n                this.hasValue = true;\n            }\n            if (!didRunTransaction) {\n                getLogger()?.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n            }\n        };\n    }\n    getDebugName() {\n        return this._debugNameData.getDebugName(this);\n    }\n    get debugName() {\n        const name = this.getDebugName();\n        return 'From Event' + (name ? `: ${name}` : '');\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n        this.hasValue = false;\n        this.value = undefined;\n    }\n    get() {\n        if (this.subscription) {\n            if (!this.hasValue) {\n                this.handleEvent(undefined);\n            }\n            return this.value;\n        }\n        else {\n            // no cache, as there are no subscribers to keep it updated\n            const value = this._getValue(undefined);\n            return value;\n        }\n    }\n}\n(function (observableFromEvent) {\n    observableFromEvent.Observer = FromEventObservable;\n    function batchEventsGlobally(tx, fn) {\n        let didSet = false;\n        if (FromEventObservable.globalTransaction === undefined) {\n            FromEventObservable.globalTransaction = tx;\n            didSet = true;\n        }\n        try {\n            fn();\n        }\n        finally {\n            if (didSet) {\n                FromEventObservable.globalTransaction = undefined;\n            }\n        }\n    }\n    observableFromEvent.batchEventsGlobally = batchEventsGlobally;\n})(observableFromEvent || (observableFromEvent = {}));\nexport function observableSignalFromEvent(debugName, event) {\n    return new FromEventObservableSignal(debugName, event);\n}\nclass FromEventObservableSignal extends BaseObservable {\n    constructor(debugName, event) {\n        super();\n        this.debugName = debugName;\n        this.event = event;\n        this.handleEvent = () => {\n            transaction((tx) => {\n                for (const o of this.observers) {\n                    tx.updateObserver(o, this);\n                    o.handleChange(this, undefined);\n                }\n            }, () => this.debugName);\n        };\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n    }\n    get() {\n        // NO OP\n    }\n}\nexport function observableSignal(debugNameOrOwner) {\n    if (typeof debugNameOrOwner === 'string') {\n        return new ObservableSignal(debugNameOrOwner);\n    }\n    else {\n        return new ObservableSignal(undefined, debugNameOrOwner);\n    }\n}\nclass ObservableSignal extends BaseObservable {\n    get debugName() {\n        return new DebugNameData(this._owner, this._debugName, undefined).getDebugName(this) ?? 'Observable Signal';\n    }\n    toString() {\n        return this.debugName;\n    }\n    constructor(_debugName, _owner) {\n        super();\n        this._debugName = _debugName;\n        this._owner = _owner;\n    }\n    trigger(tx, change) {\n        if (!tx) {\n            transaction(tx => {\n                this.trigger(tx, change);\n            }, () => `Trigger signal ${this.debugName}`);\n            return;\n        }\n        for (const o of this.observers) {\n            tx.updateObserver(o, this);\n            o.handleChange(this, change);\n        }\n    }\n    get() {\n        // NO OP\n    }\n}\n/**\n * This makes sure the observable is being observed and keeps its cache alive.\n */\nexport function keepObserved(observable) {\n    const o = new KeepAliveObserver(false, undefined);\n    observable.addObserver(o);\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setKeepObserved(keepObserved);\n/**\n * This converts the given observable into an autorun.\n */\nexport function recomputeInitiallyAndOnChange(observable, handleValue) {\n    const o = new KeepAliveObserver(true, handleValue);\n    observable.addObserver(o);\n    if (handleValue) {\n        handleValue(observable.get());\n    }\n    else {\n        observable.reportChanges();\n    }\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange);\nexport class KeepAliveObserver {\n    constructor(_forceRecompute, _handleValue) {\n        this._forceRecompute = _forceRecompute;\n        this._handleValue = _handleValue;\n        this._counter = 0;\n    }\n    beginUpdate(observable) {\n        this._counter++;\n    }\n    endUpdate(observable) {\n        this._counter--;\n        if (this._counter === 0 && this._forceRecompute) {\n            if (this._handleValue) {\n                this._handleValue(observable.get());\n            }\n            else {\n                observable.reportChanges();\n            }\n        }\n    }\n    handlePossibleChange(observable) {\n        // NO OP\n    }\n    handleChange(observable, change) {\n        // NO OP\n    }\n}\nexport function derivedObservableWithCache(owner, computeFn) {\n    let lastValue = undefined;\n    const observable = derivedOpts({ owner, debugReferenceFn: computeFn }, reader => {\n        lastValue = computeFn(reader, lastValue);\n        return lastValue;\n    });\n    return observable;\n}\nexport function derivedObservableWithWritableCache(owner, computeFn) {\n    let lastValue = undefined;\n    const onChange = observableSignal('derivedObservableWithWritableCache');\n    const observable = derived(owner, reader => {\n        onChange.read(reader);\n        lastValue = computeFn(reader, lastValue);\n        return lastValue;\n    });\n    return Object.assign(observable, {\n        clearCache: (tx) => {\n            lastValue = undefined;\n            onChange.trigger(tx);\n        },\n        setCache: (newValue, tx) => {\n            lastValue = newValue;\n            onChange.trigger(tx);\n        }\n    });\n}\n/**\n * When the items array changes, referential equal items are not mapped again.\n */\nexport function mapObservableArrayCached(owner, items, map, keySelector) {\n    let m = new ArrayMap(map, keySelector);\n    const self = derivedOpts({\n        debugReferenceFn: map,\n        owner,\n        onLastObserverRemoved: () => {\n            m.dispose();\n            m = new ArrayMap(map);\n        }\n    }, (reader) => {\n        m.setItems(items.read(reader));\n        return m.getItems();\n    });\n    return self;\n}\nclass ArrayMap {\n    constructor(_map, _keySelector) {\n        this._map = _map;\n        this._keySelector = _keySelector;\n        this._cache = new Map();\n        this._items = [];\n    }\n    dispose() {\n        this._cache.forEach(entry => entry.store.dispose());\n        this._cache.clear();\n    }\n    setItems(items) {\n        const newItems = [];\n        const itemsToRemove = new Set(this._cache.keys());\n        for (const item of items) {\n            const key = this._keySelector ? this._keySelector(item) : item;\n            let entry = this._cache.get(key);\n            if (!entry) {\n                const store = new DisposableStore();\n                const out = this._map(item, store);\n                entry = { out, store };\n                this._cache.set(key, entry);\n            }\n            else {\n                itemsToRemove.delete(key);\n            }\n            newItems.push(entry.out);\n        }\n        for (const item of itemsToRemove) {\n            const entry = this._cache.get(item);\n            entry.store.dispose();\n            this._cache.delete(item);\n        }\n        this._items = newItems;\n    }\n    getItems() {\n        return this._items;\n    }\n}\nexport class ValueWithChangeEventFromObservable {\n    constructor(observable) {\n        this.observable = observable;\n    }\n    get onDidChange() {\n        return Event.fromObservableLight(this.observable);\n    }\n    get value() {\n        return this.observable.get();\n    }\n}\nexport function observableFromValueWithChangeEvent(owner, value) {\n    if (value instanceof ValueWithChangeEventFromObservable) {\n        return value.observable;\n    }\n    return observableFromEvent(owner, value.onDidChange, () => value.value);\n}\n/**\n * Works like a derived.\n * However, if the value is not undefined, it is cached and will not be recomputed anymore.\n * In that case, the derived will unsubscribe from its dependencies.\n*/\nexport function derivedConstOnceDefined(owner, fn) {\n    return derivedObservableWithCache(owner, (reader, lastValue) => lastValue ?? fn(reader));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { observableFromEvent } from '../../../base/common/observable.js';\nexport class LanguageService extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidRequestBasicLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n        this._onDidRequestRichLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n        this._onDidChange = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onDidChange = this._onDidChange.event;\n        this._requestedBasicLanguages = new Set();\n        this._requestedRichLanguages = new Set();\n        LanguageService.instanceCount++;\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n        LanguageService.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n        return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n        return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n        return new LanguageSelection(this.onDidChange, () => {\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onDidChange, () => {\n            const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n        if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n            // Fall back to plain text if language is unknown\n            languageId = PLAINTEXT_LANGUAGE_ID;\n        }\n        return languageId;\n    }\n    requestBasicLanguageFeatures(languageId) {\n        if (!this._requestedBasicLanguages.has(languageId)) {\n            this._requestedBasicLanguages.add(languageId);\n            this._onDidRequestBasicLanguageFeatures.fire(languageId);\n        }\n    }\n    requestRichLanguageFeatures(languageId) {\n        if (!this._requestedRichLanguages.has(languageId)) {\n            this._requestedRichLanguages.add(languageId);\n            // Ensure basic features are requested\n            this.requestBasicLanguageFeatures(languageId);\n            // Ensure tokenizers are created\n            TokenizationRegistry.getOrCreate(languageId);\n            this._onDidRequestRichLanguageFeatures.fire(languageId);\n        }\n    }\n}\nclass LanguageSelection {\n    constructor(onDidChangeLanguages, selector) {\n        this._value = observableFromEvent(this, onDidChangeLanguages, () => selector());\n        this.onDidChange = Event.fromObservable(this._value);\n    }\n    get languageId() {\n        return this._value.get();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\n"],"names":["strictEquals","a","b","itemsEquals","itemEquals","equals","equalsIfDefined","equalsOrV1","v2","undefined","v1","structuralEquals","Array","isArray","length","i","Object","getPrototypeOf","prototype","aObj","bObj","keysA","keys","keysB","keysBSet","Set","key","has","WeakMap","autorun","fn","AutorunObserver","autorunOpts","options","owner","debugName","debugReferenceFn","autorunHandleChanges","createEmptyChangeSummary","handleChange","autorunWithStoreHandleChanges","store","disposable","reader","changeSummary","clear","dispose","autorunWithStore","this","_debugNameData","getDebugName","constructor","_runFn","createChangeSummary","_handleChange","state","updateCount","disposed","dependencies","dependenciesToBeRemoved","handleAutorunCreated","_runIfNeeded","o","removeObserver","emptySet","isDisposed","handleAutorunTriggered","handleAutorunFinished","toString","beginUpdate","endUpdate","d","reportChanges","assert","handlePossibleChange","observable","change","changedObservable","didChange","readObservable","get","addObserver","value","add","delete","Observer","ObservablePromise","fromFn","promise","_value","promiseResult","then","tx","set","PromiseResult","error","data","waitForState","predicate","isError","cancellationToken","Promise","resolve","reject","isImmediateRun","shouldDispose","stateObs","map","isFinished","read","dc","onCancellationRequested","isCancellationRequested","LazyObservableValue","initialValue","_equalityComparator","super","_isUpToDate","_deltas","_updateCounter","_update","observer","observers","_beginUpdate","_endUpdate","r","shouldCallBeginUpdate","shouldCallEndUpdate","_tx","_setValue","push","updateObserver","finish","newValue","observableValueOpts","lazy","equalsFn","_recomputeInitiallyAndOnChange","_keepObserved","_derived","_setRecomputeInitiallyAndOnChange","recomputeInitiallyAndOnChange","_setKeepObserved","keepObserved","_setDerivedOpts","derived","ConvenientObservable","TChange","fnOrOwner","fnOrUndefined","name","match","exec","flatten","handleValue","BaseObservable","arguments","len","size","onFirstObserverAdded","onLastObserverRemoved","transaction","TransactionImpl","_globalTransaction","globalTransaction","async","asyncTransaction","subtransaction","_fn","_getDebugName","updatingObservers","handleBeginTransaction","handleEndTransaction","observableValue","nameOrOwner","debugNameData","ObservableValue","oldValue","handleObservableChanged","hadValue","disposableObservableValue","DisposableObservableValue","DebugNameData","debugNameSource","referenceFn","target","cached","cachedDebugName","dbgName","self","ownerStr","id","ownerId","className","obj","ctor","getClassName","count","countPerClassName","result","formatOwner","getFunctionName","findKey","computeDebugName","countPerName","Map","fnSrc","trim","computeFnOrOwner","computeFn","Derived","derivedWithSetter","setter","DerivedWithSetter","derivedOpts","derivedHandleChanges","equalityComparer","derivedWithStore","computeFnOrUndefined","derivedDisposable","_computeFn","_handleLastObserverRemoved","handleDerivedCreated","_recomputeIfNeeded","handleDerivedRecomputed","_observable","propagateBeginUpdate","shouldReact","wasUpToDate","handleLastObserverRemoved","equalityComparator","globalObservableLogger","setLogger","logger","getLogger","ConsoleObservableLogger","indentation","changedObservablesSets","textToConsoleArgs","text","styles","firstArg","process","t","item","style","consoleTextToArgs","normalText","repeat","formatInfo","info","styled","formatValue","color","strikeThrough","console","log","formatKind","formatChanges","changes","join","existingHandleChange","apply","changedObservables","handleFromEventObservableTriggered","_getValue","transactionName","kind","str","padStr","bold","styleObj","entries","reduce","styleString","propName","propValue","availableLen","substr","first","val","formatArray","formatObject","constObservable","ConstObservable","observableFromEvent","args","event","getValue","FromEventObservable","observableFromEventOpts","_getTransaction","hasValue","handleEvent","didRunTransaction","subscription","observableSignalFromEvent","FromEventObservableSignal","batchEventsGlobally","didSet","observableSignal","debugNameOrOwner","ObservableSignal","_owner","_debugName","trigger","KeepAliveObserver","_forceRecompute","_handleValue","_counter","derivedObservableWithCache","lastValue","mapObservableArrayCached","items","keySelector","m","ArrayMap","setItems","getItems","_map","_keySelector","_cache","_items","forEach","entry","newItems","itemsToRemove","out","derivedConstOnceDefined","LanguageService","instanceCount","warnOnOverwrite","_onDidRequestBasicLanguageFeatures","_register","onDidRequestBasicLanguageFeatures","_onDidRequestRichLanguageFeatures","onDidRequestRichLanguageFeatures","_onDidChange","leakWarningThreshold","onDidChange","_requestedBasicLanguages","_requestedRichLanguages","_registry","LanguagesRegistry","languageIdCodec","fire","isRegisteredLanguageId","languageId","getLanguageIdByLanguageName","languageName","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine","resource","firstLine","languageIds","createById","LanguageSelection","_createAndGetLanguageIdentifier","createByFilepathOrFirstLine","requestBasicLanguageFeatures","requestRichLanguageFeatures","getOrCreate","onDidChangeLanguages","selector","fromObservable","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","userConfigured","associationItem","mime","filename","extension","filepattern","firstline","filenameLowercase","toLowerCase","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","toLanguageAssociationItem","warn","_registerLanguageAssociation","clearPlatformLanguageAssociations","filter","getLanguageIds","path","scheme","file","fsPath","parseMetaData","META_DATA_LABEL","vscodeNotebookCell","unknown","configuredLanguage","getAssociationByPath","registeredLanguage","firstlineLanguage","matches","getAssociationByFirstline","getAssociations","associations","filenameMatch","patternMatch","extensionMatch","endsWith","hasOwnProperty","NULL_LANGUAGE_ID","LanguageIdCodec","_languageIdToLanguage","_languageToLanguageId","_nextLanguageId","language","register","encodeLanguageId","decodeLanguageId","useModesRegistry","_warnOnOverwrite","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","desc","concat","getLanguages","_registerLanguages","_registerLanguage","langId","identifier","aliases","alias","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","lang","resolvedLanguage","call","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","configuration","filenamePatterns","filenamePattern","firstLineRegexStr","charAt","firstLineRegex","RegExp","err","langAliases","langAlias","containsAliases","bestName","icon","languageNameLower"],"sourceRoot":""}