{"version":3,"file":"2985.js","mappings":"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","sources":["webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/core/eolCounter.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/encodedTokenAttributes.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/languages/language.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensProviderStyling.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function countEOL(text) {\n    let eolCount = 0;\n    let firstLineLength = 0;\n    let lastLineStart = 0;\n    let eol = 0 /* StringEOL.Unknown */;\n    for (let i = 0, len = text.length; i < len; i++) {\n        const chr = text.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (eolCount === 0) {\n                firstLineLength = i;\n            }\n            eolCount++;\n            if (i + 1 < len && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                eol |= 2 /* StringEOL.CRLF */;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                eol |= 3 /* StringEOL.Invalid */;\n            }\n            lastLineStart = i + 1;\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            // \\n... case\n            eol |= 1 /* StringEOL.LF */;\n            if (eolCount === 0) {\n                firstLineLength = i;\n            }\n            eolCount++;\n            lastLineStart = i + 1;\n        }\n    }\n    if (eolCount === 0) {\n        firstLineLength = text.length;\n    }\n    return [eolCount, firstLineLength, text.length - lastLineStart, eol];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n */\nexport class TokenMetadata {\n    static getLanguageId(metadata) {\n        return (metadata & 255 /* MetadataConsts.LANGUAGEID_MASK */) >>> 0 /* MetadataConsts.LANGUAGEID_OFFSET */;\n    }\n    static getTokenType(metadata) {\n        return (metadata & 768 /* MetadataConsts.TOKEN_TYPE_MASK */) >>> 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */;\n    }\n    static containsBalancedBrackets(metadata) {\n        return (metadata & 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */) !== 0;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & 30720 /* MetadataConsts.FONT_STYLE_MASK */) >>> 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n    }\n    static getForeground(metadata) {\n        return (metadata & 16744448 /* MetadataConsts.FOREGROUND_MASK */) >>> 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n    }\n    static getBackground(metadata) {\n        return (metadata & 4278190080 /* MetadataConsts.BACKGROUND_MASK */) >>> 24 /* MetadataConsts.BACKGROUND_OFFSET */;\n    }\n    static getClassNameFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        let className = 'mtk' + foreground;\n        const fontStyle = this.getFontStyle(metadata);\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            className += ' mtki';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            className += ' mtkb';\n        }\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            className += ' mtku';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            className += ' mtks';\n        }\n        return className;\n    }\n    static getInlineStyleFromMetadata(metadata, colorMap) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        let result = `color: ${colorMap[foreground]};`;\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            result += 'font-style: italic;';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            result += 'font-weight: bold;';\n        }\n        let textDecoration = '';\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            textDecoration += ' underline';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            textDecoration += ' line-through';\n        }\n        if (textDecoration) {\n            result += `text-decoration:${textDecoration};`;\n        }\n        return result;\n    }\n    static getPresentationFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* FontStyle.Italic */),\n            bold: Boolean(fontStyle & 2 /* FontStyle.Bold */),\n            underline: Boolean(fontStyle & 4 /* FontStyle.Underline */),\n            strikethrough: Boolean(fontStyle & 8 /* FontStyle.Strikethrough */),\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageService = createDecorator('languageService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves to continue right after the deletion\n                    tokenDeltaLine = startDeltaLine;\n                    tokenStartCharacter = startCharacter;\n                    tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService, LogLevel } from '../../../platform/log/common/log.js';\nimport { SparseMultilineTokens } from '../tokens/sparseMultilineTokens.js';\nimport { ILanguageService } from '../languages/language.js';\nconst ENABLE_TRACE = false;\nlet SemanticTokensProviderStyling = class SemanticTokensProviderStyling {\n    constructor(_legend, _themeService, _languageService, _logService) {\n        this._legend = _legend;\n        this._themeService = _themeService;\n        this._languageService = _languageService;\n        this._logService = _logService;\n        this._hasWarnedOverlappingTokens = false;\n        this._hasWarnedInvalidLengthTokens = false;\n        this._hasWarnedInvalidEditStart = false;\n        this._hashTable = new HashTable();\n    }\n    getMetadata(tokenTypeIndex, tokenModifierSet, languageId) {\n        const encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n        const entry = this._hashTable.get(tokenTypeIndex, tokenModifierSet, encodedLanguageId);\n        let metadata;\n        if (entry) {\n            metadata = entry.metadata;\n            if (ENABLE_TRACE && this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling [CACHED] ${tokenTypeIndex} / ${tokenModifierSet}: foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        else {\n            let tokenType = this._legend.tokenTypes[tokenTypeIndex];\n            const tokenModifiers = [];\n            if (tokenType) {\n                let modifierSet = tokenModifierSet;\n                for (let modifierIndex = 0; modifierSet > 0 && modifierIndex < this._legend.tokenModifiers.length; modifierIndex++) {\n                    if (modifierSet & 1) {\n                        tokenModifiers.push(this._legend.tokenModifiers[modifierIndex]);\n                    }\n                    modifierSet = modifierSet >> 1;\n                }\n                if (ENABLE_TRACE && modifierSet > 0 && this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token modifier index: ${tokenModifierSet.toString(2)} for legend: ${JSON.stringify(this._legend.tokenModifiers)}`);\n                    tokenModifiers.push('not-in-legend');\n                }\n                const tokenStyle = this._themeService.getColorTheme().getTokenStyleMetadata(tokenType, tokenModifiers, languageId);\n                if (typeof tokenStyle === 'undefined') {\n                    metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                }\n                else {\n                    metadata = 0;\n                    if (typeof tokenStyle.italic !== 'undefined') {\n                        const italicBit = (tokenStyle.italic ? 1 /* FontStyle.Italic */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= italicBit | 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */;\n                    }\n                    if (typeof tokenStyle.bold !== 'undefined') {\n                        const boldBit = (tokenStyle.bold ? 2 /* FontStyle.Bold */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= boldBit | 2 /* MetadataConsts.SEMANTIC_USE_BOLD */;\n                    }\n                    if (typeof tokenStyle.underline !== 'undefined') {\n                        const underlineBit = (tokenStyle.underline ? 4 /* FontStyle.Underline */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= underlineBit | 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */;\n                    }\n                    if (typeof tokenStyle.strikethrough !== 'undefined') {\n                        const strikethroughBit = (tokenStyle.strikethrough ? 8 /* FontStyle.Strikethrough */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= strikethroughBit | 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */;\n                    }\n                    if (tokenStyle.foreground) {\n                        const foregroundBits = (tokenStyle.foreground) << 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n                        metadata |= foregroundBits | 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */;\n                    }\n                    if (metadata === 0) {\n                        // Nothing!\n                        metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                    }\n                }\n            }\n            else {\n                if (ENABLE_TRACE && this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token type index: ${tokenTypeIndex} for legend: ${JSON.stringify(this._legend.tokenTypes)}`);\n                }\n                metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                tokenType = 'not-in-legend';\n            }\n            this._hashTable.add(tokenTypeIndex, tokenModifierSet, encodedLanguageId, metadata);\n            if (ENABLE_TRACE && this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling ${tokenTypeIndex} (${tokenType}) / ${tokenModifierSet} (${tokenModifiers.join(' ')}): foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        return metadata;\n    }\n    warnOverlappingSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedOverlappingTokens) {\n            this._hasWarnedOverlappingTokens = true;\n            this._logService.warn(`Overlapping semantic tokens detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidLengthSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedInvalidLengthTokens) {\n            this._hasWarnedInvalidLengthTokens = true;\n            this._logService.warn(`Semantic token with invalid length detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidEditStart(previousResultId, resultId, editIndex, editStart, maxExpectedStart) {\n        if (!this._hasWarnedInvalidEditStart) {\n            this._hasWarnedInvalidEditStart = true;\n            this._logService.warn(`Invalid semantic tokens edit detected (previousResultId: ${previousResultId}, resultId: ${resultId}) at edit #${editIndex}: The provided start offset ${editStart} is outside the previous data (length ${maxExpectedStart}).`);\n        }\n    }\n};\nSemanticTokensProviderStyling = __decorate([\n    __param(1, IThemeService),\n    __param(2, ILanguageService),\n    __param(3, ILogService)\n], SemanticTokensProviderStyling);\nexport { SemanticTokensProviderStyling };\nexport function toMultilineTokens2(tokens, styling, languageId) {\n    const srcData = tokens.data;\n    const tokenCount = (tokens.data.length / 5) | 0;\n    const tokensPerArea = Math.max(Math.ceil(tokenCount / 1024 /* SemanticColoringConstants.DesiredMaxAreas */), 400 /* SemanticColoringConstants.DesiredTokensPerArea */);\n    const result = [];\n    let tokenIndex = 0;\n    let lastLineNumber = 1;\n    let lastStartCharacter = 0;\n    while (tokenIndex < tokenCount) {\n        const tokenStartIndex = tokenIndex;\n        let tokenEndIndex = Math.min(tokenStartIndex + tokensPerArea, tokenCount);\n        // Keep tokens on the same line in the same area...\n        if (tokenEndIndex < tokenCount) {\n            let smallTokenEndIndex = tokenEndIndex;\n            while (smallTokenEndIndex - 1 > tokenStartIndex && srcData[5 * smallTokenEndIndex] === 0) {\n                smallTokenEndIndex--;\n            }\n            if (smallTokenEndIndex - 1 === tokenStartIndex) {\n                // there are so many tokens on this line that our area would be empty, we must now go right\n                let bigTokenEndIndex = tokenEndIndex;\n                while (bigTokenEndIndex + 1 < tokenCount && srcData[5 * bigTokenEndIndex] === 0) {\n                    bigTokenEndIndex++;\n                }\n                tokenEndIndex = bigTokenEndIndex;\n            }\n            else {\n                tokenEndIndex = smallTokenEndIndex;\n            }\n        }\n        let destData = new Uint32Array((tokenEndIndex - tokenStartIndex) * 4);\n        let destOffset = 0;\n        let areaLine = 0;\n        let prevLineNumber = 0;\n        let prevEndCharacter = 0;\n        while (tokenIndex < tokenEndIndex) {\n            const srcOffset = 5 * tokenIndex;\n            const deltaLine = srcData[srcOffset];\n            const deltaCharacter = srcData[srcOffset + 1];\n            // Casting both `lineNumber`, `startCharacter` and `endCharacter` here to uint32 using `|0`\n            // to validate below with the actual values that will be inserted in the Uint32Array result\n            const lineNumber = (lastLineNumber + deltaLine) | 0;\n            const startCharacter = (deltaLine === 0 ? (lastStartCharacter + deltaCharacter) | 0 : deltaCharacter);\n            const length = srcData[srcOffset + 2];\n            const endCharacter = (startCharacter + length) | 0;\n            const tokenTypeIndex = srcData[srcOffset + 3];\n            const tokenModifierSet = srcData[srcOffset + 4];\n            if (endCharacter <= startCharacter) {\n                // this token is invalid (most likely a negative length casted to uint32)\n                styling.warnInvalidLengthSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else if (prevLineNumber === lineNumber && prevEndCharacter > startCharacter) {\n                // this token overlaps with the previous token\n                styling.warnOverlappingSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else {\n                const metadata = styling.getMetadata(tokenTypeIndex, tokenModifierSet, languageId);\n                if (metadata !== 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */) {\n                    if (areaLine === 0) {\n                        areaLine = lineNumber;\n                    }\n                    destData[destOffset] = lineNumber - areaLine;\n                    destData[destOffset + 1] = startCharacter;\n                    destData[destOffset + 2] = endCharacter;\n                    destData[destOffset + 3] = metadata;\n                    destOffset += 4;\n                    prevLineNumber = lineNumber;\n                    prevEndCharacter = endCharacter;\n                }\n            }\n            lastLineNumber = lineNumber;\n            lastStartCharacter = startCharacter;\n            tokenIndex++;\n        }\n        if (destOffset !== destData.length) {\n            destData = destData.subarray(0, destOffset);\n        }\n        const tokens = SparseMultilineTokens.create(areaLine, destData);\n        result.push(tokens);\n    }\n    return result;\n}\nclass HashTableEntry {\n    constructor(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this.tokenTypeIndex = tokenTypeIndex;\n        this.tokenModifierSet = tokenModifierSet;\n        this.languageId = languageId;\n        this.metadata = metadata;\n        this.next = null;\n    }\n}\nclass HashTable {\n    static { this._SIZES = [3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143]; }\n    constructor() {\n        this._elementsCount = 0;\n        this._currentLengthIndex = 0;\n        this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n        this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n        this._elements = [];\n        HashTable._nullOutEntries(this._elements, this._currentLength);\n    }\n    static _nullOutEntries(entries, length) {\n        for (let i = 0; i < length; i++) {\n            entries[i] = null;\n        }\n    }\n    _hash2(n1, n2) {\n        return (((n1 << 5) - n1) + n2) | 0; // n1 * 31 + n2, keep as int32\n    }\n    _hashFunc(tokenTypeIndex, tokenModifierSet, languageId) {\n        return this._hash2(this._hash2(tokenTypeIndex, tokenModifierSet), languageId) % this._currentLength;\n    }\n    get(tokenTypeIndex, tokenModifierSet, languageId) {\n        const hash = this._hashFunc(tokenTypeIndex, tokenModifierSet, languageId);\n        let p = this._elements[hash];\n        while (p) {\n            if (p.tokenTypeIndex === tokenTypeIndex && p.tokenModifierSet === tokenModifierSet && p.languageId === languageId) {\n                return p;\n            }\n            p = p.next;\n        }\n        return null;\n    }\n    add(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this._elementsCount++;\n        if (this._growCount !== 0 && this._elementsCount >= this._growCount) {\n            // expand!\n            const oldElements = this._elements;\n            this._currentLengthIndex++;\n            this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n            this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n            this._elements = [];\n            HashTable._nullOutEntries(this._elements, this._currentLength);\n            for (const first of oldElements) {\n                let p = first;\n                while (p) {\n                    const oldNext = p.next;\n                    p.next = null;\n                    this._add(p);\n                    p = oldNext;\n                }\n            }\n        }\n        this._add(new HashTableEntry(tokenTypeIndex, tokenModifierSet, languageId, metadata));\n    }\n    _add(element) {\n        const hash = this._hashFunc(element.tokenTypeIndex, element.tokenModifierSet, element.languageId);\n        element.next = this._elements[hash];\n        this._elements[hash] = element;\n    }\n}\n"],"names":["countEOL","text","eolCount","firstLineLength","lastLineStart","eol","i","len","length","chr","charCodeAt","TokenMetadata","getLanguageId","metadata","getTokenType","containsBalancedBrackets","getFontStyle","getForeground","getBackground","getClassNameFromMetadata","className","this","fontStyle","getInlineStyleFromMetadata","colorMap","foreground","result","textDecoration","getPresentationFromMetadata","italic","Boolean","bold","underline","strikethrough","ILanguageService","SparseMultilineTokens","create","startLineNumber","tokens","SparseMultilineTokensStorage","_startLineNumber","endLineNumber","_endLineNumber","constructor","_tokens","getMaxDeltaLine","toString","_updateEndLineNumber","isEmpty","getLineTokens","lineNumber","getRange","deltaRange","startColumn","endColumn","removeTokens","range","startLineIndex","endLineIndex","split","a","b","bDeltaLine","applyEdit","lastLineLength","acceptEdit","firstCharCode","_acceptDeleteRange","_acceptInsertText","firstLineIndex","lastLineIndex","deletedLinesCount","tokenMaxDeltaLine","clear","deletedBefore","acceptDeleteRange","position","lineIndex","acceptInsertText","column","_tokenCount","pieces","push","_getDeltaLine","_getStartCharacter","_getEndCharacter","join","tokenCount","_getTokenCount","startChar","maxDeltaLine","endChar","tokenIndex","deltaLine","low","high","mid","Math","floor","midDeltaLine","min","max","SparseLineTokens","subarray","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","tokenMetadata","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","Uint32Array","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","Error","character","isInsertingPreciselyOneWordCharacter","offset","tokenLength","getCount","getStartCharacter","getEndCharacter","getMetadata","__param","paramIndex","decorator","target","key","SemanticTokensProviderStyling","_legend","_themeService","_languageService","_logService","_hasWarnedOverlappingTokens","_hasWarnedInvalidLengthTokens","_hasWarnedInvalidEditStart","_hashTable","HashTable","tokenTypeIndex","tokenModifierSet","languageId","encodedLanguageId","languageIdCodec","encodeLanguageId","entry","get","tokenType","tokenTypes","tokenModifiers","modifierSet","modifierIndex","tokenStyle","getColorTheme","getTokenStyleMetadata","add","warnOverlappingSemanticTokens","warn","warnInvalidLengthSemanticTokens","warnInvalidEditStart","previousResultId","resultId","editIndex","editStart","maxExpectedStart","toMultilineTokens2","styling","srcData","data","tokensPerArea","ceil","lastLineNumber","lastStartCharacter","tokenStartIndex","tokenEndIndex","smallTokenEndIndex","bigTokenEndIndex","destData","areaLine","prevLineNumber","prevEndCharacter","deltaCharacter","decorators","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__decorate","HashTableEntry","next","_SIZES","_elementsCount","_currentLengthIndex","_currentLength","_growCount","round","_elements","_nullOutEntries","entries","_hash2","n1","n2","_hashFunc","hash","p","oldElements","first","oldNext","_add","element"],"sourceRoot":""}