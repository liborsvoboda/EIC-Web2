{"version":3,"file":"6859.js","mappings":"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","sources":["webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/extpath.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/mime.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/base/common/resources.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js","webpack://demo/../../node_modules/monaco-editor/esm/vs/platform/registry/common/platform.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { startsWithIgnoreCase } from './strings.js';\nexport function isPathSeparator(code) {\n    return code === 47 /* CharCode.Slash */ || code === 92 /* CharCode.Backslash */;\n}\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, posix.sep);\n}\n/**\n * Takes a Windows OS path (using backward or forward slashes) and turns it into a posix path:\n * - turns backward slashes into forward slashes\n * - makes it absolute if it starts with a drive letter\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toPosixPath(osPath) {\n    if (osPath.indexOf('/') === -1) {\n        osPath = toSlashes(osPath);\n    }\n    if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) { // starts with a drive letter\n        osPath = '/' + osPath;\n    }\n    return osPath;\n}\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path, sep = posix.sep) {\n    if (!path) {\n        return '';\n    }\n    const len = path.length;\n    const firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            // UNC candidate \\\\localhost\\shares\\ddd\n            //               ^^^^^^^^^^^^^^^^^^^\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                let pos = 3;\n                const start = pos;\n                for (; pos < len; pos++) {\n                    if (isPathSeparator(path.charCodeAt(pos))) {\n                        break;\n                    }\n                }\n                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n                    pos += 1;\n                    for (; pos < len; pos++) {\n                        if (isPathSeparator(path.charCodeAt(pos))) {\n                            return path.slice(0, pos + 1) // consume this separator\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        // /user/far\n        // ^\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        // check for windows drive letter c:\\ or c:\n        if (path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                // C:\\fff\n                // ^^^\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                // C:\n                // ^^\n                return path.slice(0, 2);\n            }\n        }\n    }\n    // check for URI\n    // scheme://authority/path\n    // ^^^^^^^^^^^^^^^^^^^\n    let pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3; // 3 -> \"://\".length\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1); // consume this separator\n            }\n        }\n    }\n    return '';\n}\n/**\n * @deprecated please use `IUriIdentityService.extUri.isEqualOrParent` instead. If\n * you are in a context without services, consider to pass down the `extUri` from the\n * outside, or use `extUriBiasedIgnorePathCase` if you know what you are doing.\n */\nexport function isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n    if (base === parentCandidate) {\n        return true;\n    }\n    if (!base || !parentCandidate) {\n        return false;\n    }\n    if (parentCandidate.length > base.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (parentCandidate.length === base.length) {\n            return true; // same path, different casing\n        }\n        let sepOffset = parentCandidate.length;\n        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n        }\n        return base.charAt(sepOffset) === separator;\n    }\n    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n        parentCandidate += separator;\n    }\n    return base.indexOf(parentCandidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n    return char0 >= 65 /* CharCode.A */ && char0 <= 90 /* CharCode.Z */ || char0 >= 97 /* CharCode.a */ && char0 <= 122 /* CharCode.z */;\n}\nexport function hasDriveLetter(path, isWindowsOS = isWindows) {\n    if (isWindowsOS) {\n        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 /* CharCode.Colon */;\n    }\n    return false;\n}\n","export const Mimes = Object.freeze({\n    text: 'text/plain',\n    binary: 'application/octet-stream',\n    unknown: 'application/unknown',\n    markdown: 'text/markdown',\n    latex: 'text/latex',\n    uriList: 'text/uri-list',\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as extpath from './extpath.js';\nimport { Schemas } from './network.js';\nimport * as paths from './path.js';\nimport { isLinux, isWindows } from './platform.js';\nimport { compare as strCompare, equalsIgnoreCase } from './strings.js';\nimport { URI, uriToFsPath } from './uri.js';\nexport function originalFSPath(uri) {\n    return uriToFsPath(uri, true);\n}\nexport class ExtUri {\n    constructor(_ignorePathCasing) {\n        this._ignorePathCasing = _ignorePathCasing;\n    }\n    compare(uri1, uri2, ignoreFragment = false) {\n        if (uri1 === uri2) {\n            return 0;\n        }\n        return strCompare(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));\n    }\n    isEqual(uri1, uri2, ignoreFragment = false) {\n        if (uri1 === uri2) {\n            return true;\n        }\n        if (!uri1 || !uri2) {\n            return false;\n        }\n        return this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);\n    }\n    getComparisonKey(uri, ignoreFragment = false) {\n        return uri.with({\n            path: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,\n            fragment: ignoreFragment ? null : undefined\n        }).toString();\n    }\n    isEqualOrParent(base, parentCandidate, ignoreFragment = false) {\n        if (base.scheme === parentCandidate.scheme) {\n            if (base.scheme === Schemas.file) {\n                return extpath.isEqualOrParent(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n            }\n            if (isEqualAuthority(base.authority, parentCandidate.authority)) {\n                return extpath.isEqualOrParent(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n            }\n        }\n        return false;\n    }\n    // --- path math\n    joinPath(resource, ...pathFragment) {\n        return URI.joinPath(resource, ...pathFragment);\n    }\n    basenameOrAuthority(resource) {\n        return basename(resource) || resource.authority;\n    }\n    basename(resource) {\n        return paths.posix.basename(resource.path);\n    }\n    extname(resource) {\n        return paths.posix.extname(resource.path);\n    }\n    dirname(resource) {\n        if (resource.path.length === 0) {\n            return resource;\n        }\n        let dirname;\n        if (resource.scheme === Schemas.file) {\n            dirname = URI.file(paths.dirname(originalFSPath(resource))).path;\n        }\n        else {\n            dirname = paths.posix.dirname(resource.path);\n            if (resource.authority && dirname.length && dirname.charCodeAt(0) !== 47 /* CharCode.Slash */) {\n                console.error(`dirname(\"${resource.toString})) resulted in a relative path`);\n                dirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n            }\n        }\n        return resource.with({\n            path: dirname\n        });\n    }\n    normalizePath(resource) {\n        if (!resource.path.length) {\n            return resource;\n        }\n        let normalizedPath;\n        if (resource.scheme === Schemas.file) {\n            normalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n        }\n        else {\n            normalizedPath = paths.posix.normalize(resource.path);\n        }\n        return resource.with({\n            path: normalizedPath\n        });\n    }\n    relativePath(from, to) {\n        if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n            return undefined;\n        }\n        if (from.scheme === Schemas.file) {\n            const relativePath = paths.relative(originalFSPath(from), originalFSPath(to));\n            return isWindows ? extpath.toSlashes(relativePath) : relativePath;\n        }\n        let fromPath = from.path || '/';\n        const toPath = to.path || '/';\n        if (this._ignorePathCasing(from)) {\n            // make casing of fromPath match toPath\n            let i = 0;\n            for (const len = Math.min(fromPath.length, toPath.length); i < len; i++) {\n                if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\n                    if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\n                        break;\n                    }\n                }\n            }\n            fromPath = toPath.substr(0, i) + fromPath.substr(i);\n        }\n        return paths.posix.relative(fromPath, toPath);\n    }\n    resolvePath(base, path) {\n        if (base.scheme === Schemas.file) {\n            const newURI = URI.file(paths.resolve(originalFSPath(base), path));\n            return base.with({\n                authority: newURI.authority,\n                path: newURI.path\n            });\n        }\n        path = extpath.toPosixPath(path); // we allow path to be a windows path\n        return base.with({\n            path: paths.posix.resolve(base.path, path)\n        });\n    }\n    // --- misc\n    isAbsolutePath(resource) {\n        return !!resource.path && resource.path[0] === '/';\n    }\n    isEqualAuthority(a1, a2) {\n        return a1 === a2 || (a1 !== undefined && a2 !== undefined && equalsIgnoreCase(a1, a2));\n    }\n    hasTrailingPathSeparator(resource, sep = paths.sep) {\n        if (resource.scheme === Schemas.file) {\n            const fsp = originalFSPath(resource);\n            return fsp.length > extpath.getRoot(fsp).length && fsp[fsp.length - 1] === sep;\n        }\n        else {\n            const p = resource.path;\n            return (p.length > 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */) && !(/^[a-zA-Z]:(\\/$|\\\\$)/.test(resource.fsPath)); // ignore the slash at offset 0\n        }\n    }\n    removeTrailingPathSeparator(resource, sep = paths.sep) {\n        // Make sure that the path isn't a drive letter. A trailing separator there is not removable.\n        if (hasTrailingPathSeparator(resource, sep)) {\n            return resource.with({ path: resource.path.substr(0, resource.path.length - 1) });\n        }\n        return resource;\n    }\n    addTrailingPathSeparator(resource, sep = paths.sep) {\n        let isRootSep = false;\n        if (resource.scheme === Schemas.file) {\n            const fsp = originalFSPath(resource);\n            isRootSep = ((fsp !== undefined) && (fsp.length === extpath.getRoot(fsp).length) && (fsp[fsp.length - 1] === sep));\n        }\n        else {\n            sep = '/';\n            const p = resource.path;\n            isRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */;\n        }\n        if (!isRootSep && !hasTrailingPathSeparator(resource, sep)) {\n            return resource.with({ path: resource.path + '/' });\n        }\n        return resource;\n    }\n}\n/**\n * Unbiased utility that takes uris \"as they are\". This means it can be interchanged with\n * uri#toString() usages. The following is true\n * ```\n * assertEqual(aUri.toString() === bUri.toString(), exturi.isEqual(aUri, bUri))\n * ```\n */\nexport const extUri = new ExtUri(() => false);\n/**\n * BIASED utility that _mostly_ ignored the case of urs paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriBiasedIgnorePathCase = new ExtUri(uri => {\n    // A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n    // Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n    return uri.scheme === Schemas.file ? !isLinux : true;\n});\n/**\n * BIASED utility that always ignores the casing of uris paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriIgnorePathCase = new ExtUri(_ => true);\nexport const isEqual = extUri.isEqual.bind(extUri);\nexport const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);\nexport const getComparisonKey = extUri.getComparisonKey.bind(extUri);\nexport const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);\nexport const basename = extUri.basename.bind(extUri);\nexport const extname = extUri.extname.bind(extUri);\nexport const dirname = extUri.dirname.bind(extUri);\nexport const joinPath = extUri.joinPath.bind(extUri);\nexport const normalizePath = extUri.normalizePath.bind(extUri);\nexport const relativePath = extUri.relativePath.bind(extUri);\nexport const resolvePath = extUri.resolvePath.bind(extUri);\nexport const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);\nexport const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);\nexport const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);\nexport const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);\nexport const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);\n/**\n * Data URI related helpers.\n */\nexport var DataUri;\n(function (DataUri) {\n    DataUri.META_DATA_LABEL = 'label';\n    DataUri.META_DATA_DESCRIPTION = 'description';\n    DataUri.META_DATA_SIZE = 'size';\n    DataUri.META_DATA_MIME = 'mime';\n    function parseMetaData(dataUri) {\n        const metadata = new Map();\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n        // the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n        const meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n        meta.split(';').forEach(property => {\n            const [key, value] = property.split(':');\n            if (key && value) {\n                metadata.set(key, value);\n            }\n        });\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n        // the mime is: image/png\n        const mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n        if (mime) {\n            metadata.set(DataUri.META_DATA_MIME, mime);\n        }\n        return metadata;\n    }\n    DataUri.parseMetaData = parseMetaData;\n})(DataUri || (DataUri = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n    const root = Object.create(null);\n    for (const key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    const segments = key.split('.');\n    const last = segments.pop();\n    let curr = settingsTreeRoot;\n    for (let i = 0; i < segments.length; i++) {\n        const s = segments[i];\n        let obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                if (obj === null) {\n                    conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is null`);\n                    return;\n                }\n                break;\n            default:\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object' && curr !== null) {\n        try {\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n        }\n        catch (e) {\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n        }\n    }\n    else {\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n}\nexport function removeFromValueTree(valueTree, key) {\n    const segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n    const first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        const value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        let current = config;\n        for (const component of path) {\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    const path = settingPath.split('.');\n    const result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n    return settingKey.replace(/[\\[\\]]/g, '');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.registeredConfigurationDefaults = [];\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = {\n            properties: {},\n            patternProperties: {},\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        this.configurationProperties = {};\n        this.policyConfigurations = new Map();\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = new Set();\n        this.doRegisterConfigurations(configurations, validate, properties);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        const properties = new Set();\n        this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n        this.registeredConfigurationDefaults.push(...configurationDefaults);\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                bucket.add(key);\n                const configurationDefaultOverridesForKey = this.configurationDefaultsOverrides.get(key)\n                    ?? this.configurationDefaultsOverrides.set(key, { configurationDefaultOverrides: [] }).get(key);\n                const value = overrides[key];\n                configurationDefaultOverridesForKey.configurationDefaultOverrides.push({ value, source });\n                // Configuration defaults for Override Identifiers\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForOverrideIdentifier(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    this.updateDefaultOverrideProperty(key, newDefaultOverride, source);\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                }\n                // Configuration defaults for Configuration Properties\n                else {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForConfigurationProperty(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    }\n    updateDefaultOverrideProperty(key, newDefaultOverride, source) {\n        const property = {\n            type: 'object',\n            default: newDefaultOverride.value,\n            description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", getLanguageTagSettingPlainKey(key)),\n            $ref: resourceLanguageSettingsSchemaId,\n            defaultDefaultValue: newDefaultOverride.value,\n            source,\n            defaultValueSource: source\n        };\n        this.configurationProperties[key] = property;\n        this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n    }\n    mergeDefaultConfigurationsForOverrideIdentifier(overrideIdentifier, configurationValueObject, valueSource, existingDefaultOverride) {\n        const defaultValue = existingDefaultOverride?.value || {};\n        const source = existingDefaultOverride?.source ?? new Map();\n        // This should not happen\n        if (!(source instanceof Map)) {\n            console.error('objectConfigurationSources is not a Map');\n            return undefined;\n        }\n        for (const propertyKey of Object.keys(configurationValueObject)) {\n            const propertyDefaultValue = configurationValueObject[propertyKey];\n            const isObjectSetting = types.isObject(propertyDefaultValue) &&\n                (types.isUndefined(defaultValue[propertyKey]) || types.isObject(defaultValue[propertyKey]));\n            // If the default value is an object, merge the objects and store the source of each keys\n            if (isObjectSetting) {\n                defaultValue[propertyKey] = { ...(defaultValue[propertyKey] ?? {}), ...propertyDefaultValue };\n                // Track the source of each value in the object\n                if (valueSource) {\n                    for (const objectKey in propertyDefaultValue) {\n                        source.set(`${propertyKey}.${objectKey}`, valueSource);\n                    }\n                }\n            }\n            // Primitive values are overridden\n            else {\n                defaultValue[propertyKey] = propertyDefaultValue;\n                if (valueSource) {\n                    source.set(propertyKey, valueSource);\n                }\n                else {\n                    source.delete(propertyKey);\n                }\n            }\n        }\n        return { value: defaultValue, source };\n    }\n    mergeDefaultConfigurationsForConfigurationProperty(propertyKey, value, valuesSource, existingDefaultOverride) {\n        const property = this.configurationProperties[propertyKey];\n        const existingDefaultValue = existingDefaultOverride?.value ?? property?.defaultDefaultValue;\n        let source = valuesSource;\n        const isObjectSetting = types.isObject(value) &&\n            (property !== undefined && property.type === 'object' ||\n                property === undefined && (types.isUndefined(existingDefaultValue) || types.isObject(existingDefaultValue)));\n        // If the default value is an object, merge the objects and store the source of each keys\n        if (isObjectSetting) {\n            source = existingDefaultOverride?.source ?? new Map();\n            // This should not happen\n            if (!(source instanceof Map)) {\n                console.error('defaultValueSource is not a Map');\n                return undefined;\n            }\n            for (const objectKey in value) {\n                if (valuesSource) {\n                    source.set(`${propertyKey}.${objectKey}`, valuesSource);\n                }\n            }\n            value = { ...(types.isObject(existingDefaultValue) ? existingDefaultValue : {}), ...value };\n        }\n        return { value, source };\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n    }\n    doRegisterOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate, bucket) {\n        configurations.forEach(configuration => {\n            this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* ConfigurationScope.WINDOW */, bucket) {\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        const properties = configuration.properties;\n        if (properties) {\n            for (const key in properties) {\n                const property = properties[key];\n                if (validate && validateProperty(key, property)) {\n                    delete properties[key];\n                    continue;\n                }\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                    if (properties[key].policy?.name) {\n                        this.policyConfigurations.set(properties[key].policy.name, key);\n                    }\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                bucket.add(key);\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            for (const node of subNodes) {\n                this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n            }\n        }\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    getPolicyConfigurations() {\n        return this.policyConfigurations;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            const properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            const subNodes = configuration.allOf;\n            subNodes?.forEach(register);\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* ConfigurationScope.APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* ConfigurationScope.MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* ConfigurationScope.WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* ConfigurationScope.RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key)?.configurationDefaultOverrideValue;\n        let defaultValue = undefined;\n        let defaultSource = undefined;\n        if (configurationdefaultOverride\n            && (!property.disallowConfigurationDefault || !configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n        ) {\n            defaultValue = configurationdefaultOverride.value;\n            defaultSource = configurationdefaultOverride.source;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches?.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    if (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {\n        return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));\n    }\n    return null;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n(function (_util) {\n    _util.serviceIds = new Map();\n    _util.DI_TARGET = '$di$target';\n    _util.DI_DEPENDENCIES = '$di$dependencies';\n    function getServiceDependencies(ctor) {\n        return ctor[_util.DI_DEPENDENCIES] || [];\n    }\n    _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\nexport const IInstantiationService = createDecorator('instantiationService');\nfunction storeServiceDependency(id, target, index) {\n    if (target[_util.DI_TARGET] === target) {\n        target[_util.DI_DEPENDENCIES].push({ id, index });\n    }\n    else {\n        target[_util.DI_DEPENDENCIES] = [{ id, index }];\n        target[_util.DI_TARGET] = target;\n    }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator(serviceId) {\n    if (_util.serviceIds.has(serviceId)) {\n        return _util.serviceIds.get(serviceId);\n    }\n    const id = function (target, key, index) {\n        if (arguments.length !== 3) {\n            throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n        }\n        storeServiceDependency(id, target, index);\n    };\n    id.toString = () => serviceId;\n    _util.serviceIds.set(serviceId, id);\n    return id;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport * as platform from '../../registry/common/platform.js';\nexport const Extensions = {\n    JSONContribution: 'base.contributions.json'\n};\nfunction normalizeId(id) {\n    if (id.length > 0 && id.charAt(id.length - 1) === '#') {\n        return id.substring(0, id.length - 1);\n    }\n    return id;\n}\nclass JSONContributionRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.schemasById = {};\n    }\n    registerSchema(uri, unresolvedSchemaContent) {\n        this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n        this._onDidChangeSchema.fire(uri);\n    }\n    notifySchemaChanged(uri) {\n        this._onDidChangeSchema.fire(uri);\n    }\n}\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Assert from '../../../base/common/assert.js';\nimport * as Types from '../../../base/common/types.js';\nclass RegistryImpl {\n    constructor() {\n        this.data = new Map();\n    }\n    add(id, data) {\n        Assert.ok(Types.isString(id));\n        Assert.ok(Types.isObject(data));\n        Assert.ok(!this.data.has(id), 'There is already an extension with this id');\n        this.data.set(id, data);\n    }\n    as(id) {\n        return this.data.get(id) || null;\n    }\n}\nexport const Registry = new RegistryImpl();\n"],"names":["isPathSeparator","code","toSlashes","osPath","replace","sep","toPosixPath","indexOf","test","getRoot","path","len","length","firstLetter","charCodeAt","pos","start","slice","isWindowsDriveLetter","isEqualOrParent","base","parentCandidate","ignoreCase","separator","sepOffset","charAt","char0","hasDriveLetter","isWindowsOS","Mimes","Object","freeze","text","binary","unknown","markdown","latex","uriList","originalFSPath","uri","ExtUri","constructor","_ignorePathCasing","this","compare","uri1","uri2","ignoreFragment","getComparisonKey","isEqual","with","toLowerCase","undefined","fragment","toString","scheme","file","query","isEqualAuthority","authority","joinPath","resource","pathFragment","basenameOrAuthority","basename","extname","dirname","console","error","normalizePath","normalizedPath","normalize","relativePath","from","to","fromPath","toPath","i","Math","min","substr","relative","resolvePath","newURI","resolve","isAbsolutePath","a1","a2","hasTrailingPathSeparator","fsp","p","fsPath","removeTrailingPathSeparator","addTrailingPathSeparator","isRootSep","extUri","_","bind","DataUri","META_DATA_LABEL","META_DATA_DESCRIPTION","META_DATA_SIZE","META_DATA_MIME","parseMetaData","dataUri","metadata","Map","substring","lastIndexOf","split","forEach","property","key","value","set","mime","ModesRegistry","_onDidChangeLanguages","onDidChangeLanguages","event","_languages","registerLanguage","def","push","fire","dispose","splice","getLanguages","add","PLAINTEXT_LANGUAGE_ID","id","extensions","aliases","mimetypes","as","Configuration","registerDefaultConfigurations","overrides","IConfigurationService","toValuesTree","properties","conflictReporter","root","create","addToValueTree","settingsTreeRoot","segments","last","pop","curr","s","obj","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","result","current","component","accessSetting","getLanguageTagSettingPlainKey","settingKey","Extensions","allSettings","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","JSONContribution","OVERRIDE_IDENTIFIER_PATTERN","OVERRIDE_IDENTIFIER_REGEX","RegExp","OVERRIDE_PROPERTY_PATTERN","OVERRIDE_PROPERTY_REGEX","overrideIdentifiersFromKey","identifiers","matches","exec","identifier","trim","configurationRegistry","registeredConfigurationDefaults","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","configurationDefaultsOverrides","defaultLanguageConfigurationOverridesNode","title","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","allowTrailingCommas","allowComments","configurationProperties","policyConfigurations","excludedConfigurationProperties","registerSchema","registerOverridePropertyPatternKey","registerConfiguration","configuration","validate","registerConfigurations","configurations","doRegisterConfigurations","configurationDefaults","doRegisterDefaultConfigurations","defaultsOverrides","bucket","source","configurationDefaultOverridesForKey","get","configurationDefaultOverrides","newDefaultOverride","mergeDefaultConfigurationsForOverrideIdentifier","configurationDefaultOverrideValue","updateDefaultOverrideProperty","mergeDefaultConfigurationsForConfigurationProperty","updatePropertyDefaultValue","updateSchema","doRegisterOverrideIdentifiers","type","default","description","$ref","defaultDefaultValue","defaultValueSource","overrideIdentifier","configurationValueObject","valueSource","existingDefaultOverride","propertyKey","propertyDefaultValue","objectKey","delete","valuesSource","existingDefaultValue","registerOverrideIdentifiers","updateOverridePropertyPatternKey","validateAndRegisterProperties","extensionInfo","restrictedProperties","registerJSONConfiguration","scope","validateProperty","restricted","includes","hasOwnProperty","included","policy","name","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","getPolicyConfigurations","register","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","errorMessage","configurationdefaultOverride","defaultSource","disallowConfigurationDefault","getDefaultValue","schema","_util","serviceIds","DI_TARGET","DI_DEPENDENCIES","getServiceDependencies","ctor","IInstantiationService","createDecorator","serviceId","has","target","index","arguments","Error","storeServiceDependency","jsonContributionRegistry","_onDidChangeSchema","schemasById","unresolvedSchemaContent","notifySchemaChanged","Registry","data"],"sourceRoot":""}