{
  "version": 3,
  "sources": ["src/index.ts", "src/languageFeatures.ts", "src/cssData.ts"],
  "sourcesContent": ["import { registerMarkerDataProvider } from 'monaco-marker-data-provider'\nimport { type MonacoTailwindcssOptions } from 'monaco-tailwindcss'\nimport { createWorkerManager } from 'monaco-worker-manager'\n\nimport {\n  createCodeActionProvider,\n  createColorProvider,\n  createCompletionItemProvider,\n  createHoverProvider,\n  createMarkerDataProvider\n} from './languageFeatures.js'\nimport { type TailwindcssWorker } from './tailwindcss.worker.js'\n\nexport const defaultLanguageSelector = ['css', 'javascript', 'html', 'mdx', 'typescript'] as const\n\nexport { tailwindcssData } from './cssData.js'\n\nexport const configureMonacoTailwindcss: typeof import('monaco-tailwindcss').configureMonacoTailwindcss =\n  (monaco, { languageSelector = defaultLanguageSelector, tailwindConfig } = {}) => {\n    const workerManager = createWorkerManager<TailwindcssWorker, MonacoTailwindcssOptions>(monaco, {\n      label: 'tailwindcss',\n      moduleId: 'monaco-tailwindcss/tailwindcss.worker',\n      createData: { tailwindConfig }\n    })\n\n    const disposables = [\n      workerManager,\n      monaco.languages.registerCodeActionProvider(\n        languageSelector,\n        createCodeActionProvider(workerManager.getWorker)\n      ),\n      monaco.languages.registerColorProvider(\n        languageSelector,\n        createColorProvider(monaco, workerManager.getWorker)\n      ),\n      monaco.languages.registerCompletionItemProvider(\n        languageSelector,\n        createCompletionItemProvider(workerManager.getWorker)\n      ),\n      monaco.languages.registerHoverProvider(\n        languageSelector,\n        createHoverProvider(workerManager.getWorker)\n      )\n    ]\n\n    // Monaco editor doesn\u2019t provide a function to match language selectors, so let\u2019s just support\n    // strings here.\n    for (const language of Array.isArray(languageSelector)\n      ? languageSelector\n      : [languageSelector]) {\n      if (typeof language === 'string') {\n        disposables.push(\n          registerMarkerDataProvider(\n            monaco,\n            language,\n            createMarkerDataProvider(workerManager.getWorker)\n          )\n        )\n      }\n    }\n\n    return {\n      dispose() {\n        for (const disposable of disposables) {\n          disposable.dispose()\n        }\n      },\n\n      setTailwindConfig(newTailwindConfig) {\n        workerManager.updateCreateData({ tailwindConfig: newTailwindConfig })\n      },\n\n      async generateStylesFromContent(css, contents) {\n        const client = await workerManager.getWorker()\n\n        return client.generateStylesFromContent(\n          css,\n          contents.map((content) => (typeof content === 'string' ? { content } : content))\n        )\n      }\n    }\n  }\n", "import { fromRatio, names as namedColors } from '@ctrl/tinycolor'\nimport {\n  fromCodeActionContext,\n  fromCompletionContext,\n  fromCompletionItem,\n  fromPosition,\n  fromRange,\n  toCodeAction,\n  toColorInformation,\n  toCompletionItem,\n  toCompletionList,\n  toHover,\n  toMarkerData\n} from 'monaco-languageserver-types'\nimport { type MarkerDataProvider } from 'monaco-marker-data-provider'\nimport { type editor, type languages, type MonacoEditor } from 'monaco-types'\nimport { type WorkerGetter } from 'monaco-worker-manager'\n\nimport { type TailwindcssWorker } from './tailwindcss.worker.js'\n\ntype WorkerAccessor = WorkerGetter<TailwindcssWorker>\n\nconst colorNames = Object.values(namedColors)\nconst editableColorRegex = new RegExp(\n  `-\\\\[(${colorNames.join('|')}|((?:#|rgba?\\\\(|hsla?\\\\())[^\\\\]]+)\\\\]$`\n)\nconst sheet = new CSSStyleSheet()\ndocument.adoptedStyleSheets.push(sheet)\n\nfunction colorValueToHex(value: number): string {\n  return Math.round(value * 255)\n    .toString(16)\n    .padStart(2, '0')\n}\n\nfunction createColorClass(color: languages.IColor): string {\n  const hex = `${colorValueToHex(color.red)}${colorValueToHex(color.green)}${colorValueToHex(\n    color.blue\n  )}`\n  const className = `tailwindcss-color-decoration-${hex}`\n  const selector = `.${className}`\n  for (const rule of sheet.cssRules) {\n    if ((rule as CSSStyleRule).selectorText === selector) {\n      return className\n    }\n  }\n  sheet.insertRule(`${selector}{background-color:#${hex}}`)\n  return className\n}\n\nexport function createColorProvider(\n  monaco: MonacoEditor,\n  getWorker: WorkerAccessor\n): languages.DocumentColorProvider {\n  const modelMap = new WeakMap<editor.ITextModel, string[]>()\n\n  monaco.editor.onWillDisposeModel((model) => {\n    modelMap.delete(model)\n  })\n\n  return {\n    async provideDocumentColors(model) {\n      const worker = await getWorker(model.uri)\n\n      const editableColors: languages.IColorInformation[] = []\n      const nonEditableColors: editor.IModelDeltaDecoration[] = []\n      const colors = await worker.getDocumentColors(String(model.uri), model.getLanguageId())\n      if (colors) {\n        for (const lsColor of colors) {\n          const monacoColor = toColorInformation(lsColor)\n          const text = model.getValueInRange(monacoColor.range)\n          if (editableColorRegex.test(text)) {\n            editableColors.push(monacoColor)\n          } else {\n            nonEditableColors.push({\n              range: monacoColor.range,\n              options: {\n                before: {\n                  content: '\\u00A0',\n                  inlineClassName: `${createColorClass(monacoColor.color)} colorpicker-color-decoration`,\n                  inlineClassNameAffectsLetterSpacing: true\n                }\n              }\n            })\n          }\n        }\n      }\n\n      modelMap.set(model, model.deltaDecorations(modelMap.get(model) ?? [], nonEditableColors))\n\n      return editableColors\n    },\n\n    provideColorPresentations(model, colorInformation) {\n      const className = model.getValueInRange(colorInformation.range)\n      const match = new RegExp(\n        `-\\\\[(${colorNames.join('|')}|(?:(?:#|rgba?\\\\(|hsla?\\\\())[^\\\\]]+)\\\\]$`,\n        'i'\n      ).exec(className)\n\n      if (!match) {\n        return []\n      }\n\n      const [currentColor] = match\n\n      const isNamedColor = colorNames.includes(currentColor)\n      const color = fromRatio({\n        r: colorInformation.color.red,\n        g: colorInformation.color.green,\n        b: colorInformation.color.blue,\n        a: colorInformation.color.alpha\n      })\n\n      let hexValue = color.toHex8String(\n        !isNamedColor && (currentColor.length === 4 || currentColor.length === 5)\n      )\n      if (hexValue.length === 5) {\n        hexValue = hexValue.replace(/f$/, '')\n      } else if (hexValue.length === 9) {\n        hexValue = hexValue.replace(/ff$/, '')\n      }\n\n      const rgbValue = color.toRgbString().replaceAll(' ', '')\n      const hslValue = color.toHslString().replaceAll(' ', '')\n      const prefix = className.slice(0, Math.max(0, match.index))\n\n      return [\n        { label: `${prefix}-[${hexValue}]` },\n        { label: `${prefix}-[${rgbValue}]` },\n        { label: `${prefix}-[${hslValue}]` }\n      ]\n    }\n  }\n}\n\nexport function createHoverProvider(getWorker: WorkerAccessor): languages.HoverProvider {\n  return {\n    async provideHover(model, position) {\n      const worker = await getWorker(model.uri)\n\n      const hover = await worker.doHover(\n        String(model.uri),\n        model.getLanguageId(),\n        fromPosition(position)\n      )\n\n      return hover && toHover(hover)\n    }\n  }\n}\n\nexport function createCodeActionProvider(getWorker: WorkerAccessor): languages.CodeActionProvider {\n  return {\n    async provideCodeActions(model, range, context) {\n      const worker = await getWorker(model.uri)\n\n      const codeActions = await worker.doCodeActions(\n        String(model.uri),\n        model.getLanguageId(),\n        fromRange(range),\n        fromCodeActionContext(context)\n      )\n\n      if (codeActions) {\n        return {\n          actions: codeActions.map(toCodeAction),\n          dispose() {\n            // Do nothing\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function createCompletionItemProvider(\n  getWorker: WorkerAccessor\n): languages.CompletionItemProvider {\n  return {\n    async provideCompletionItems(model, position, context) {\n      const worker = await getWorker(model.uri)\n\n      const completionList = await worker.doComplete(\n        String(model.uri),\n        model.getLanguageId(),\n        fromPosition(position),\n        fromCompletionContext(context)\n      )\n\n      if (!completionList) {\n        return\n      }\n\n      const wordInfo = model.getWordUntilPosition(position)\n\n      return toCompletionList(completionList, {\n        range: {\n          startLineNumber: position.lineNumber,\n          startColumn: wordInfo.startColumn,\n          endLineNumber: position.lineNumber,\n          endColumn: wordInfo.endColumn\n        }\n      })\n    },\n\n    async resolveCompletionItem(item) {\n      const worker = await getWorker()\n\n      const result = await worker.resolveCompletionItem(fromCompletionItem(item))\n\n      return toCompletionItem(result, { range: item.range })\n    }\n  }\n}\n\nexport function createMarkerDataProvider(getWorker: WorkerAccessor): MarkerDataProvider {\n  return {\n    owner: 'tailwindcss',\n    async provideMarkerData(model) {\n      const worker = await getWorker(model.uri)\n\n      const diagnostics = await worker.doValidate(String(model.uri), model.getLanguageId())\n\n      return diagnostics?.map(toMarkerData)\n    }\n  }\n}\n", "import { type languages } from 'monaco-types'\n\nfunction createTailwindDirective(name: string, value: string): languages.css.IAtDirectiveData {\n  return {\n    name: `@${name}`,\n    description: { kind: 'markdown', value },\n    references: [\n      {\n        name: `@${name} documentation`,\n        url: `https://tailwindcss.com/docs/functions-and-directives#${name}`\n      }\n    ]\n  }\n}\n\n// The descriptions have been taken from\n// https://github.com/tailwindlabs/tailwindcss.com/blob/master/src/pages/docs/functions-and-directives.mdx\n\nconst tailwindDirective = createTailwindDirective(\n  'tailwind',\n  `Use the \\`@tailwind\\` directive to insert Tailwind's \\`base\\`, \\`components\\`, \\`utilities\\` and \\`variants\\` styles into your CSS.\n\n\\`\\`\\`css\n/**\n * This injects Tailwind's base styles and any base styles registered by\n * plugins.\n */\n@tailwind base;\n\n/**\n * This injects Tailwind's component classes and any component classes\n * registered by plugins.\n */\n@tailwind components;\n\n/**\n * This injects Tailwind's utility classes and any utility classes registered\n * by plugins.\n */\n@tailwind utilities;\n\n/**\n * Use this directive to control where Tailwind injects the hover, focus,\n * responsive, dark mode, and other variants of each class.\n *\n * If omitted, Tailwind will append these classes to the very end of\n * your stylesheet by default.\n */\n@tailwind variants;\n\\`\\`\\``\n)\n\nconst layerDirective = createTailwindDirective(\n  'layer',\n  `Use the \\`@layer\\` directive to tell Tailwind which \"bucket\" a set of custom styles belong to. Valid layers are \\`base\\`, \\`components\\`, and \\`utilities\\`.\n\n\\`\\`\\`css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  h1 {\n    @apply text-2xl;\n  }\n  h2 {\n    @apply text-xl;\n  }\n}\n\n@layer components {\n  .btn-blue {\n    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;\n  }\n}\n\n@layer utilities {\n  .filter-none {\n    filter: none;\n  }\n  .filter-grayscale {\n    filter: grayscale(100%);\n  }\n}\n\\`\\`\\`\n\nTailwind will automatically move any CSS within a \\`@layer\\` directive to the same place as the corresponding \\`@tailwind\\` rule, so you don't have to worry about authoring your CSS in a specific order to avoid specificity issues.\n\nAny custom CSS added to a layer will only be included in the final build if that CSS is actually used in your HTML, just like all of the classes built in to Tailwind by default.\n\nWrapping any custom CSS in a \\`@layer\\` directive also makes it possible to use modifiers with those rules, like \\`hover:\\` and \\`focus:\\` or responsive modifiers like \\`md:\\` and \\`lg:\\`.`\n)\n\nconst applyDirective = createTailwindDirective(\n  'apply',\n  `Use \\`@apply\\` to inline any existing utility classes into your own custom CSS.\n\nThis is useful when you need to write custom CSS (like to override the styles in a third-party library) but still want to work with your design tokens and use the same syntax you're used to using in your HTML.\n\n\\`\\`\\`css\n.select2-dropdown {\n  @apply rounded-b-lg shadow-md;\n}\n.select2-search {\n  @apply border border-gray-300 rounded;\n}\n.select2-results__group {\n  @apply text-lg font-bold text-gray-900;\n}\n\\`\\`\\`\n\nAny rules inlined with \\`@apply\\` will have \\`!important\\` **removed** by default to avoid specificity issues:\n\n\\`\\`\\`css\n/* Input */\n.foo {\n  color: blue !important;\n}\n\n.bar {\n  @apply foo;\n}\n\n/* Output */\n.foo {\n  color: blue !important;\n}\n\n.bar {\n  color: blue;\n}\n\\`\\`\\`\n\nIf you'd like to \\`@apply\\` an existing class and make it \\`!important\\`, simply add \\`!important\\` to the end of the declaration:\n\n\\`\\`\\`css\n/* Input */\n.btn {\n  @apply font-bold py-2 px-4 rounded !important;\n}\n\n/* Output */\n.btn {\n  font-weight: 700 !important;\n  padding-top: .5rem !important;\n  padding-bottom: .5rem !important;\n  padding-right: 1rem !important;\n  padding-left: 1rem !important;\n  border-radius: .25rem !important;\n}\n\\`\\`\\`\n\nNote that if you're using Sass/SCSS, you'll need to use Sass' interpolation feature to get this to work:\n\n\\`\\`\\`css\n.btn {\n  @apply font-bold py-2 px-4 rounded #{!important};\n}\n\\`\\`\\``\n)\n\nconst configDirective = createTailwindDirective(\n  'config',\n  `Use the \\`@config\\` directive to specify which config file Tailwind should use when compiling CSS file. This is useful for projects that need to use different configuration files for different CSS entry points.\n\n\\`\\`\\`css\n@config \"./tailwind.site.config.js\";\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\\`\\`\\`\n\n\\`\\`\\`css\n@config \"./tailwind.admin.config.js\";\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\\`\\`\\`\n\nThe path you provide to the \\`@config\\` directive is relative to that CSS file, and will take precedence over a path defined in your PostCSS configuration or in the Tailwind CLI.`\n)\n\nexport const tailwindcssData: languages.css.CSSDataV1 = {\n  version: 1.1,\n  atDirectives: [tailwindDirective, layerDirective, applyDirective, configDirective]\n}\n"],
  "mappings": "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",
  "names": []
}
